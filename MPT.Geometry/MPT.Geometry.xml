<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MPT.Geometry</name>
    </assembly>
    <members>
        <member name="T:MPT.Geometry.GeometryLibrary">
            <summary>
            Library of operations related to the geometry framework.
            </summary>
        </member>
        <member name="F:MPT.Geometry.GeometryLibrary.ZeroTolerance">
            <summary>
            Default zero tolerance for operations.
            </summary>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsCollinearSameDirection(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the same direction.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsConcave(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            Vectors form a concave angle.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsOrthogonal(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            Vectors form a 90 degree angle.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsConvex(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            Vectors form a convex angle.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsCollinearOppositeDirection(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
             True: Segments are parallel, on the same line, oriented in the opposite direction.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsConcaveInside(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            True: The concave side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsConvexInside(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            True: The convex side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.ConcavityCollinearity(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns a value indicating the concavity of the vectors. 
            1 = Pointing the same way. 
            &gt; 0 = Concave. 
            0 = Orthogonal. 
            &lt; 0 = Convex. 
            -1 = Pointing the exact opposite way.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.DotProduct(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Dot product of two vectors.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.CrossProduct(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Cross-product of two vectors.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.Angle(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns the angle [radians] between the two vectors.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.Area(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns the area between two vectors.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Intersections.LineToLineIntersection">
            <summary>
            Class LineToLineIntersection.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.NumberOfIntersectionsOnHorizontalProjection(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate[],System.Double)">
            <summary>
            The numbers of shape boundary intersections a horizontal line makes when projecting to the right from the provided point.
            An odd number indicates the point is inside the shape.
            An even number indicates the point is outside the shape.
            If the point is on a vertex or segment, the function returns 0.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="shapeBoundary">The shape boundary composed of n points.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">Shape boundary describes a shape. Closure to the shape boundary is needed.</exception>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsWithinLineHeightInclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies within the straight line height.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="ptI">The vertex i.</param>
            <param name="ptJ">The vertex j.</param>
            <returns><c>true</c> if the point lies within the segment extents height, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsWithinLineHeightExclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies within the straight line height, not including the vertex locations.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="ptI">The vertex i.</param>
            <param name="ptJ">The vertex j.</param>
            <returns><c>true</c> if the point lies within the segment extents height, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsWithinLineWidthInclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies within the straight line width.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="ptI">The vertex i.</param>
            <param name="ptJ">The vertex j.</param>
            <returns><c>true</c> if the point lies within the segment width, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsWithinLineWidthExclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies within the straight line width.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="ptI">The vertex i.</param>
            <param name="ptJ">The vertex j.</param>
            <returns><c>true</c> if the point lies within the segment width, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsLeftOfLineEndInclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies to the left of the straight line end.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="ptI">Vertex i.</param>
            <param name="ptJ">Vertex j.</param>
            <returns><c>true</c> if the point lies to the left of the straight line end, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsLeftOfLineEndExclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies to the left of the straight line end, not including the vertex locations..
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="ptI">Vertex i.</param>
            <param name="ptJ">Vertex j.</param>
            <returns><c>true</c> if the point lies to the left of the straight line end, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsBelowLineBottomInclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies below the straight line end.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="ptI">Vertex i.</param>
            <param name="ptJ">Vertex j.</param>
            <returns><c>true</c> if the point lies to below the segment bottom, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsBelowLineBottomExclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies below the straight line end.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="ptI">Vertex i.</param>
            <param name="ptJ">Vertex j.</param>
            <returns><c>true</c> if the point lies to below the segment bottom, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsLeftOfSegmentIntersection(System.Double,System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point is to the left of the horizontally projected segment intersection.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="xIntersection">The x-coordinate of the intersection of the projected line.</param>
            <param name="vertexI">The vertex i.</param>
            <param name="vertexJ">The vertex j.</param>
            <returns><c>true</c> if the point is to the left of the horizontally projected segment intersection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsBelowSegmentIntersection(System.Double,System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point is below the vertically projected segment intersection.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="yIntersection">The y-coordinate of the intersection of the projected line.</param>
            <param name="vertexI">The vertex i.</param>
            <param name="vertexJ">The vertex j.</param>
            <returns><c>true</c> if the point is below the vertically projected segment intersection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.IntersectionPointX(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            The x-coordinate of the intersection of the horizontally projected line with the provided segment.
            </summary>
            <param name="yPtN">The y-coordinate of pt n, where the projection starts.</param>
            <param name="ptI">Vertex i of the segment.</param>
            <param name="ptJ">Vertex j of the segment.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.IntersectionPointY(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            The y-coordinate of the intersection of the vertically projected line with the provided segment.
            </summary>
            <param name="xPtN">The x-coordinate of pt n, where the projection starts.</param>
            <param name="ptI">Vertex i of the segment.</param>
            <param name="ptJ">Vertex j of the segment.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Intersections.PointIntersection">
            <summary>
            Handles calculations related to point intersections.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointIntersection.IsOnPoint(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the points overlap.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns><c>true</c> if the points lie in the same position, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointIntersection.IsOnBoundary(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate[])">
            <summary>
            Determines whether the specified location is on the path defined by straight line segments connecting the provided coordinates.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="shapeBoundary">The shape boundary.</param>
            <returns><c>true</c> if [is on shape] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointIntersection.IsWithinShape(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate[])">
            <summary>
            Determines whether the specified location is within the shape defined by straight line segments connecting the provided coordinates.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="shapeBoundary">The shape boundary composed of n points.</param>
            <returns><c>true</c> if the specified location is within the shape; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MPT.Geometry.Intersections.PointProjection">
            <summary>
            Handles calculations related to horizontal projections.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.NumberOfIntersectionsOnHorizontalProjection(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate[],System.Boolean,System.Boolean,System.Double)">
            <summary>
            The numbers of shape boundary intersections a horizontal line makes when projecting to the right from the provided point.
            If the point is on a vertex or segment, the function returns either 0 or 1.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="shapeBoundary">The shape boundary composed of n points.</param>
            <param name="includePointOnSegment">if set to <c>true</c> [include point on segment].</param>
            <param name="includePointOnVertex">if set to <c>true</c> [include point on vertex].</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">Shape boundary describes a shape. Closure to the shape boundary is needed.</exception>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsWithinSegmentExtentsHeightInclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies within the segment extents height.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies within the segment extents height, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsWithinSegmentExtentsHeightExclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies within the segment extents height, not including the boundary locations.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies within the segment extents height, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsWithinSegmentExtentsWidthInclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies within the segment extents width.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies within the segment width, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsWithinSegmentExtentsWidthExclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies within the segment extents width.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies within the segment width, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsLeftOfSegmentExtentsEndInclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies to the left of the segment extents max x-coordinate.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies to the left of the segment end, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsLeftOfSegmentExtentsEndExclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies to the left of the segment extents max x-coordinate, not including the boundary coordinate.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies to the left of the segment end, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsBelowSegmentExtentsInclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies below the segment extents end.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies to below the segment bottom, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsBelowSegmentExtentsExclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies below the segment extents end.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies to below the segment bottom, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.IntersectionPointX(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            The x-coordinate of the intersection of the horizontally projected line with the provided segment.
            </summary>
            <param name="yPtN">The y-coordinate of pt n, where the projection starts.</param>
            <param name="segment">The segment.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentException">Segment is horizontal, so intersection point is either infinity or NAN.</exception>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsLeftOfSegmentIntersection(System.Double,System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point is to the left of the horizontally projected segment intersection.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="xIntersection">The x-coordinate of the intersection of the projected line.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point is to the left of the horizontally projected segment intersection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.IntersectionPointY(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            The y-coordinate of the intersection of the vertically projected line with the provided segment.
            </summary>
            <param name="xPtN">The x-coordinate of pt n, where the projection starts.</param>
            <param name="segment">The segment.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentException">Segment is vertical, so intersection point is either infinity or NAN.</exception>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsBelowSegmentIntersection(System.Double,System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point is below the vertically projected segment intersection.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="yIntersection">The y-coordinate of the intersection of the projected line.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point is below the vertically projected segment intersection, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:MPT.Geometry.ITransform`1">
            <summary>
            Interface ITransform
            </summary>
        </member>
        <member name="M:MPT.Geometry.ITransform`1.Translate(MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Translates the segment.
            </summary>
            <param name="translation">The amount to translate by.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.ITransform`1.ScaleFromPoint(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Scales the segment from the provided reference point.
            </summary>
            <param name="scale">The amount to scale relative to the reference point.</param>
            <param name="referencePoint">The reference point.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.ITransform`1.RotateAboutPoint(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Rotates the segment about the reference point.
            </summary>
            <param name="rotation">The amount of rotation. [rad]</param>
            <param name="referencePoint">The center of rotation reference point.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="T:MPT.Geometry.Segments.ICircularSegment">
            <summary>
            Interface for all shapes that incorporate elements of a curve.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICircularSegment.Center">
            <summary>
            CartesianCoordinaterepresenting the center of the circular arc, which lies at a distance of the radius form either end point.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICircularSegment.Radius">
            <summary>
            Radius of the curve.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICircularSegment.ArcLength">
            <summary>
            Total length of the curve (radius*angle).
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICircularSegment.Curvature">
            <summary>
            The curvature of the line (1/radius).
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICircularSegment.Angle">
            <summary>
            Angle between the rays that connect each end of the curve to the common origin [radians].
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICircularSegment.AngleDegrees">
            <summary>
            Angle between the rays that connect each end of the curve to the common origin [degrees].
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.ICircularSegment.TangentialAngle(System.Double)">
            <summary>
            Angle that is tangent to the slope of the curve [radians].
            </summary>
            <param name="angleNormal">Angle [radians] along the curve sweep where the tangential angle is desired.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.ICircularSegment.NormalAngle(System.Double)">
            <summary>
            Angle that is normal to the slope of the curve [radians].
            </summary>
            <param name="angleTangential">The slope of the curve [radians] where the normal angle is desired.</param>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Segments.ILine">
            <summary>
            Interface ILine
            </summary>
        </member>
        <member name="T:MPT.Geometry.Segments.IPathDivisionExtension">
            <summary>
            Interface for paths that are divisible.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.SplitBySegmentPoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Splits the segment by the provided point.
            </summary>
            <param name="pointDivision">The point to use for division.</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.SplitBySegmentPosition(System.Double)">
            <summary>
            Returns a copy of the segment that splits the segment by the relative location.
            <paramref name="sRelative"/> must be between 0 and 1.
            </summary>
            <param name="sRelative">The relative position along the path between 0 (point i) and 1 (point j).</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.ExtendSegmentToPoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Extends the segment to the provided point.
            </summary>
            <param name="pointExtension">The point to extend the segment to.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.CoordinateOfPerpendicularProjection(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Coordinate of where a perpendicular projection intersects the provided coordinate.
            </summary>
            <param name="point">The point.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.PointOffsetOnSegment(System.Double)">
            <summary>
            Returns a point determined by a given fraction of the distance between point i and point j of the segment.
             <paramref name="fraction"/> must be between 0 and 1.
            </summary>
            <param name="fraction">Fraction of the way from point 1 to point 2.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.PointScaledFromSegment(System.Double)">
            <summary>
             Returns a point determined by a given ratio of the distance between point i and point j of the segment.
            </summary>
            <param name="ratio">Ratio of the size of the existing segment. 
            If <paramref name="ratio"/>&lt; 0, returned point is offset from point i, in that direction. 
            If <paramref name="ratio"/>&gt; 0, returned point is offset from point j, in that direction.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.MergeWithPriorSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that merges the current segment with the prior segment.
            </summary>
            <param name="priorSegment">The prior segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.MergeWithFollowingSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that merges the current segment with the following segment.
            </summary>
            <param name="followingSegment">The following segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.JoinWithPriorSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that joins the current segment with the prior segment.
            </summary>
            <param name="priorSegment">The prior segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.JoinWithFollowingSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that joins the current segment with the following segment.
            </summary>
            <param name="followingSegment">The following segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="T:MPT.Geometry.Segments.IPathSegment">
            <summary>
            Interface for any segment along a path lying in a plane.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.IPathSegment.Extents">
            <summary>
            Gets the extents.
            </summary>
            <value>The extents.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.IPathSegment.I">
            <summary>
            First coordinate value.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.IPathSegment.J">
            <summary>
            Second coordinate value.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.Length">
            <summary>
            Length of the path segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.Xo">
            <summary>
            X-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.Yo">
            <summary>
            Y-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.X(System.Double)">
            <summary>
            X-coordinate on the path that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.Y(System.Double)">
            <summary>
            Y-coordinate on the path that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.HasSameCoordinates(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether the segment [has same coordinates] as [the specified segment].
            </summary>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if [has same coordinates] [the specified segment]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.PointByPathPosition(System.Double)">
            <summary>
            Coordinate on the path that corresponds to the position along the path.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.NormalVector(System.Double)">
            <summary>
            Vector that is normal to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.UpdateI(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns a copy of the segment with an updated I coordinate.
            </summary>
            <param name="newCoordinate">The new coordinate.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.UpdateJ(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns a copy of the segment with an updated J coordinate.
            </summary>
            <param name="newCoordinate">The new coordinate.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.Reverse">
            <summary>
            Returns a copy of the segment with the I- &amp; J-coordinates reversed, as well as any other relevant control points.
            </summary>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.MergeWithPriorSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Merges the with leading segment.
            </summary>
            <param name="leadingSegment">The leading segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.MergeWithFollowingSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Merges the with following segment.
            </summary>
            <param name="followingSegment">The following segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.SplitBySegmentPosition(System.Double)">
            <summary>
            Splits the segment by the relative location.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
        </member>
        <member name="T:MPT.Geometry.Segments.IPathSegmentCollision`1">
            <summary>
            Interface for path segments with methods for collision detection.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.IPathSegmentCollision`1.Curve">
            <summary>
            Gets the curve.
            </summary>
            <value>The curve.</value>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentCollision`1.IncludesCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the line segment between or on the defining points.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentCollision`1.IsIntersecting(MPT.Geometry.Segments.LineSegment)">
            <summary>
            Provided line segment intersects the line segment between or on the defining points.
            </summary>
            <param name="otherLine"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentCollision`1.IntersectionCoordinate(MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns a point where the line segment intersects the provided line segment.
            </summary>
            <param name="otherLine">Line segment that intersects the current line segment.</param>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Segments.IPathSegmentPolarCoordinates">
            <summary>
            Interface related to line geometries in polar coordinates.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.IPathSegmentPolarCoordinates.IPolar">
            <summary>
            First coordinate value {radius, rotation[radians]}.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.IPathSegmentPolarCoordinates.JPolar">
            <summary>
            Second coordinate value {radius, rotation[radians]}.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentPolarCoordinates.LengthPolar">
            <summary>
            Length of the path segment [radians].
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentPolarCoordinates.CentroidPolar">
            <summary>
            Polar-coordinates of the centroid of the line {radius, rotation[radians]}.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentPolarCoordinates.XPolar(System.Double)">
            <summary>
            X-coordinate on the path that corresponds to the polar-coordinate given.
            </summary>
            <param name="theta">Rotation-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentPolarCoordinates.YPolar(System.Double)">
            <summary>
            Y-coordinate on the path that corresponds to the polar-coordinate given.
            </summary>
            <param name="theta">Rotation-coordinate for which a y-coordinate is desired [radians].</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentPolarCoordinates.PointByPathPositionPolar(System.Double)">
            <summary>
            Coordinate on the path that corresponds to the position along the path.
            </summary>
            <param name="theta">The relative position along the path [radians].</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentPolarCoordinates.NormalVectorPolar(System.Double)">
            <summary>
            Vector that is normal to the line connecting the defining points at the position specified.
            </summary>
            <param name="theta">The relative position along the path [radians].</param>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegmentPolarCoordinates.TangentVectorPolar(System.Double)">
            <summary>
            Vector that is tangential to the line connecting the defining points at the position specified.
            </summary>
            <param name="theta">The relative position along the path [radians].</param>
        </member>
        <member name="T:MPT.Geometry.Segments.IPolyLine">
            <summary>
            Interface for any object consisting of multiple connecting objects of IPathSegment.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Segments.LineSegment">
            <summary>
            Segment that describes a straight line in a plane.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.LineSegment.I">
            <summary>
            First coordinate value.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.LineSegment.J">
            <summary>
            Second coordinate value.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes the line segment to span between the provided points.
            </summary>
            <param name="i">First point of the line.</param>
            <param name="j">Second point of the line.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.Length">
            <summary>
            Length of the line segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.Xo">
            <summary>
            X-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.Yo">
            <summary>
            Y-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.X(System.Double)">
            <summary>
            X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.Y(System.Double)">
            <summary>
            Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.PointByPathPosition(System.Double)">
            <summary>
            Coordinate on the path that corresponds to the position along the path.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.NormalVector(System.Double)">
            <summary>
            Vector that is normal to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.UpdateI(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns a copy of the segment with an updated I coordinate.
            </summary>
            <param name="newCoordinate">The new coordinate.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.UpdateJ(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns a copy of the segment with an updated J coordinate.
            </summary>
            <param name="newCoordinate">The new coordinate.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.Reverse">
            <summary>
            Returns a copy of the segment with the I- &amp; J-coordinates reversed.
            </summary>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.IncludesCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the line segment between or on the defining points.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.IsIntersecting(MPT.Geometry.Segments.LineSegment)">
            <summary>
            Provided line segment intersects the line segment between or on the defining points.
            </summary>
            <param name="otherLine"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.IntersectionCoordinate(MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns a point where the line segment intersects the provided line segment.
            </summary>
            <param name="otherLine">Line segment that intersects the current line segment.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.SplitBySegmentPoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Splits the segment by the provided point.
            </summary>
            <param name="pointDivision">The point to use for division.</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.ExtendSegmentToPoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Extends the segment to the provided point.
            </summary>
            <param name="pointExtension">The point to extend the segment to.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.pointOffsetOnCurve(System.Double)">
            <summary>
            Returns a point determined by a given fraction of the distance between point i and point j of the segment.
            <paramref name="sRelative"/> must be between 0 and 1.
            </summary>
            <param name="sRelative">The relative position along the path between 0 (point i) and 1 (point j).</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.MergeWithPriorSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that merges the current segment with the prior segment.
            </summary>
            <param name="priorSegment">The prior segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.MergeWithFollowingSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that merges the current segment with the following segment.
            </summary>
            <param name="followingSegment">The following segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.JoinWithPriorSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that joins the current segment with the prior segment.
            </summary>
            <param name="priorSegment">The prior segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.JoinWithFollowingSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that joins the current segment with the following segment.
            </summary>
            <param name="followingSegment">The following segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.SplitBySegmentPosition(System.Double)">
            <summary>
            Returns a copy of the segment that splits the segment by the relative location.
            <paramref name="sRelative"/> must be between 0 and 1.
            </summary>
            <param name="sRelative">The relative position along the path between 0 (point i) and 1 (point j).</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.ExtendSegmentToCurve(MPT.Math.Curves.LinearCurve)">
            <summary>
            Extends the segment to intersect the provided curve.
            </summary>
            <param name="curve">The curve.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.CoordinateOfSegmentProjectedToCurve(MPT.Math.Curves.LinearCurve)">
            <summary>
            Coordinate of where the segment projection intersects the provided curve.
            </summary>
            <param name="curve">The curve.</param>
            <returns>CartesianCoordinate.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Curves never intersect.</exception>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.CoordinateOfPerpendicularProjection(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Coordinate of where a perpendicular projection intersects the provided coordinate.
            </summary>
            <param name="point">The point.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.ToVector">
            <summary>
            Converts the line segment to a vector.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Segments.PathSegment`1">
            <summary>
            Base class used for segment types.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PathSegment`1.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
        </member>
        <member name="F:MPT.Geometry.Segments.PathSegment`1._curve">
            <summary>
            The curve
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PathSegment`1.Curve">
            <summary>
            Gets the curve.
            </summary>
            <value>The curve.</value>
        </member>
        <member name="F:MPT.Geometry.Segments.PathSegment`1._extents">
            <summary>
            The extents
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PathSegment`1.Extents">
            <summary>
            Gets or sets the extents.
            </summary>
            <value>The extents.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.PathSegment`1.I">
            <summary>
            First coordinate value.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PathSegment`1.J">
            <summary>
            Second coordinate value.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes the segment to span between the provided points.
            </summary>
            <param name="i">First point of the line.</param>
            <param name="j">Second point of the line.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.HasSameCoordinates(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether the segment [has same coordinates] as [the specified segment].
            </summary>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if [has same coordinates] [the specified segment]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.TangentVector">
            <summary>
            Vector that is tangential to the line connecting the defining points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.NormalVector">
            <summary>
            Vector that is normal to the line connecting the defining points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.validateRelativePosition(System.Double)">
            <summary>
            Validates the relative position provided.
            </summary>
            <param name="sRelative">The relative position, s.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Relative position must be between 0 and 1, but was {sRelative}.</exception>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.pointOffsetOnCurve(System.Double)">
            <summary>
            Returns a point determined by a given fraction of the distance between point i and point j of the segment.
            <paramref name="sRelative"/> must be between 0 and 1.
            </summary>
            <param name="sRelative">The relative position along the path between 0 (point i) and 1 (point j).</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.Length">
            <summary>
            Length of the path segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.Xo">
            <summary>
            X-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.Yo">
            <summary>
            Y-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.X(System.Double)">
            <summary>
            X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.Y(System.Double)">
            <summary>
            Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.PointByPathPosition(System.Double)">
            <summary>
            Coordinate on the path that corresponds to the position along the path.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.NormalVector(System.Double)">
            <summary>
            Vector that is normal to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.Translate(MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Translates the segment.
            </summary>
            <param name="translation">The amount to translate by.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.ScaleFromI(System.Double)">
            <summary>
            Scales the segment from point I.
            </summary>
            <param name="scaleFromI">The amount to scale from point I.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.ScaleFromJ(System.Double)">
            <summary>
            Scales the segment from point J.
            </summary>
            <param name="scaleFromJ">The amount to scale from point J.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.ScaleFromPoint(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Scales the segment from the provided reference point.
            </summary>
            <param name="scale">The amount to scale relative to the reference point.</param>
            <param name="referencePoint">The reference point.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.RotateAboutI(MPT.Math.Coordinates.Angle)">
            <summary>
            Rotates the segment from point I.
            </summary>
            <param name="rotation">The amount of rotation. [rad]</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.RotateAboutJ(MPT.Math.Coordinates.Angle)">
            <summary>
            Rotates the segment from point J.
            </summary>
            <param name="rotation">The amount of rotation. [rad]</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.RotateAboutPoint(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Rotates the segment about the reference point.
            </summary>
            <param name="rotation">The amount of rotation. [rad]</param>
            <param name="referencePoint">The center of rotation reference point.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.PointOffsetOnSegment(System.Double)">
            <summary>
            Returns a point determined by a given fraction of the distance between point i and point j of the segment.
            <paramref name="sRelative"/> must be between 0 and 1.
            </summary>
            <param name="sRelative">The relative position along the path between 0 (point i) and 1 (point j).</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.PointScaledFromSegment(System.Double)">
            <summary>
             Returns a point determined by a given ratio of the distance between point i and point j of the segment.
            </summary>
            <param name="ratio">Ratio of the size of the existing segment. 
            If <paramref name="ratio"/>&lt; 0, returned point is offset from point i, in that direction. 
            If <paramref name="ratio"/>&gt; 0, returned point is offset from point j, in that direction.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.UpdateI(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns a copy of the segment with an updated I coordinate.
            </summary>
            <param name="newCoordinate">The new coordinate.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.UpdateJ(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns a copy of the segment with an updated J coordinate.
            </summary>
            <param name="newCoordinate">The new coordinate.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.MergeWithPriorSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that merges the current segment with the prior segment.
            </summary>
            <param name="priorSegment">The prior segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.MergeWithFollowingSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that merges the current segment with the following segment.
            </summary>
            <param name="followingSegment">The following segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.JoinWithPriorSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that joins the current segment with the prior segment.
            </summary>
            <param name="priorSegment">The prior segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.JoinWithFollowingSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns a copy of the segment that joins the current segment with the following segment.
            </summary>
            <param name="followingSegment">The following segment.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.SplitBySegmentPosition(System.Double)">
            <summary>
            Returns a copy of the segment that splits the segment by the relative location.
            <paramref name="sRelative"/> must be between 0 and 1.
            </summary>
            <param name="sRelative">The relative position along the path between 0 (point i) and 1 (point j).</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.IncludesCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the line segment between or on the defining points.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.IsIntersecting(MPT.Geometry.Segments.LineSegment)">
            <summary>
            Provided line segment intersects the line segment between or on the defining points.
            </summary>
            <param name="otherLine"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.IntersectionCoordinate(MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns a point where the line segment intersects the provided line segment.
            </summary>
            <param name="otherLine">Line segment that intersects the current line segment.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.Equals(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment`1.Reverse">
            <summary>
            Returns a copy of the segment with the I- &amp; J-coordinates reversed, as well as any other relevant control points.
            </summary>
            <returns>IPathSegment.</returns>
        </member>
        <member name="T:MPT.Geometry.Segments.PolyLine">
            <summary>
            Class PolyLine.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.CountPoints">
            <summary>
            Gets the count coordinates.
            </summary>
            <value>The count coordinates.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.Coordinates">
            <summary>
            Gets the coordinates.
            </summary>
            <value>The coordinates.</value>
        </member>
        <member name="F:MPT.Geometry.Segments.PolyLine._segmentBoundary">
            <summary>
            The segment boundary
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.CountSegments">
            <summary>
            Gets the count segments.
            </summary>
            <value>The count segments.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MPT.Geometry.Segments.IPathSegment"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Segments.PolyLine" /> class.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.#ctor(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Segments.PolyLine" /> class.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.#ctor(System.Collections.Generic.IEnumerable{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Segments.PolyLine" /> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.#ctor(MPT.Geometry.Tools.SegmentsBoundary)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Segments.PolyLine"/> class.
            </summary>
            <param name="segmentBoundary">The segment boundary.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.PointBoundary">
            <summary>
            Returns the points that define the boundary between segments.
            </summary>
            <returns>PointBoundary.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.Extents">
            <summary>
            Returns the overall extents of the polyline. 
            This includes extents for curve shapes in between vertices.
            </summary>
            <returns>PointExtents.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.Coordinate(System.Int32)">
            <summary>
            Coordinates the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.FirstPoint">
            <summary>
            Returns the first point of the polyline.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.LastPoint">
            <summary>
            Returns the last point of the polyline.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.ContainsPoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="point">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>true if <paramref name="point">item</paramref> is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.AddFirstPoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Adds the point as the first point in the polyline.
            Segment created will be of the same type as the prior first segment.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.AddLastPoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Adds the point as the last point in the polyline.
            Segment created will be the same type as the prior last segment.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.RemoveFirstPoint">
            <summary>
            Removes the first point and corresponding segment.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.RemoveLastPoint">
            <summary>
            Removes the last point and corresponding segment.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.RemovePoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Removes the specified point if it is present.
            </summary>
            <param name="point">The coordinate of the point to remove.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.MovePoint(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Moves the specified point to the provided coordinate.
            </summary>
            <param name="originalPoint">The original point.</param>
            <param name="newPoint">The new point to move the original point to.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.Segment(System.Int32)">
            <summary>
            Returns the segment at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.AdjacentSegmentsAt(System.Int32)">
            <summary>
            Returns the pair of segments that join at the provided point index.
            If the point is the first or last point, the leading or following segment will be null.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.ContainsSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether the specified polyline contains the specified segment.
            </summary>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the polyline contains the specified segment; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.AddFirstSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Adds the segment as the first segment in the polyline.
            Segment created will be of the same type as the prior first segment.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.AddLastSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Adds the segment as the last segment in the polyline.
            Segment created will be the same type as the prior last segment.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.SplitSegment(MPT.Geometry.Segments.IPathSegment,System.Double)">
            <summary>
            Splits the segment at the specified relative location.
            </summary>
            <param name="segment">The segment.</param>
            <param name="sRelative">The relative.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.RemoveFirstSegment">
            <summary>
            Removes the first segment and corresponding point.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.RemoveLastSegment">
            <summary>
            Removes the last segment and corresponding point.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.Translate(MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Translates the polyline.
            </summary>
            <param name="translation">The amount to translate by.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.ScaleFromPoint(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Scales the polyline from the provided reference point.
            </summary>
            <param name="scale">The amount to scale relative to the reference point.</param>
            <param name="referencePoint">The reference point.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.RotateAboutPoint(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Rotates the polyline about the reference point.
            </summary>
            <param name="rotation">The amount of rotation. [rad]</param>
            <param name="referencePoint">The center of rotation reference point.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.CloneLine">
            <summary>
            Clones the line.
            </summary>
            <returns>PolyLine.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.GetCoordinateEnumerator">
            <summary>
            Gets the coordinate enumerator.
            </summary>
            <value>The coordinate enumerator.</value>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.GetSegmentEnumerator">
            <summary>
            Gets the segment enumerator.
            </summary>
            <value>The segment enumerator.</value>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Decagon">
            <summary>
            A regular polygon of 10 sides.
            Implements the <see cref="T:MPT.Geometry.Shapes.RegularPolygon" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.RegularPolygon" />
        </member>
        <member name="F:MPT.Geometry.Shapes.Decagon._setNumberOfSides">
            <summary>
            The number of sides.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Decagon.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Decagon"/> class.
            </summary>
            <param name="circumRadius">The circumradius.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Decagon.DecagonByInradius(System.Double)">
            <summary>
            Returns a decagon sized by the inradius.
            </summary>
            <param name="inRadius">The inradius.</param>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Decagon.DecagonByCircumradius(System.Double)">
            <summary>
            Returns a decagon sized by the circumradius.
            </summary>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.EquilateralTriangle">
            <summary>
            Any triangle of 3 equal sides (3 equal angles).
            Implements the <see cref="T:MPT.Geometry.Shapes.Triangle" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.Triangle" />
        </member>
        <member name="F:MPT.Geometry.Shapes.EquilateralTriangle._sidesEqual">
            <summary>
            Length of the equal-length sides of the triangle.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.EquilateralTriangle.AngleA">
            <summary>
            The angle, α, which is opposite of side a and is 60°.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.EquilateralTriangle.AngleB">
            <summary>
            The angle, β, which is opposite of side b and is 60°.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.EquilateralTriangle.AngleC">
            <summary>
            The angle, γ, which is opposite of side c and is 60°.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.EquilateralTriangle.h">
            <summary>
            Gets the height, which is the measurement of the line formed from any point to a perpendicular intersection with a side.
            </summary>
            <value>The h.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.EquilateralTriangle.CircumRadius">
            <summary>
            Gets the circumcenter radius, R, which describes a circle whose edges are defined by the 3 defining points of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.EquilateralTriangle.InRadius">
            <summary>
            Gets the inradius, r, which describes a circle whose edge is tangent to all 3 sides of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.EquilateralTriangle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.EquilateralTriangle" /> class.
            </summary>
            <param name="sideLength">Length of the side.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.EquilateralTriangle.#ctor(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.EquilateralTriangle" /> class.
            </summary>
            <param name="apexCoordinate">The apex coordinate.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.EquilateralTriangle.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.EquilateralTriangle.Perimeter">
            <summary>
            Length of all sides of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.EquilateralTriangle.SideLengthA">
            <summary>
            Length of side a.
            </summary>
            <value>a.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.EquilateralTriangle.SideLengthB">
            <summary>
            Length of side b, which lies horizontally as the base.
            </summary>
            <value>a.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.EquilateralTriangle.SideLengthC">
            <summary>
            Length of side c.
            </summary>
            <value>a.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.EquilateralTriangle.LocalCoordinates">
            <summary>
            Formulates the local coordinates for the shape.
            </summary>
            <returns>IList&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.EquilateralTriangle.getHeight(System.Double)">
            <summary>
            Gets the height.
            </summary>
            <param name="sidesEqual">The sides equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Hexagon">
            <summary>
             A regular polygon of 6 sides.
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.Hexagon._setNumberOfSides">
            <summary>
            The number of sides.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Hexagon.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Hexagon"/> class.
            </summary>
            <param name="circumRadius">The circumradius.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Hexagon.HexagonByInradius(System.Double)">
            <summary>
            Returns a hexagon sized by the inradius.
            </summary>
            <param name="inRadius">The inradius.</param>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Hexagon.HexagonByCircumradius(System.Double)">
            <summary>
            Returns a hexagon sized by the circumradius.
            </summary>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.ICircumCircle">
            <summary>
            A circle that passes through all vertices of a plane figure and contains the entire figure in its interior. 
            All triangles have circumcircles and so do all regular polygons. Most other polygons do not.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.ICircumCircle.CircumRadius">
            <summary>
            Gets the circumradius, which is the radius of a circle whose edges are defined by the defining points of the shape.
            </summary>
            <value>The circumradius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.ICircumCircle.CircumCenter">
            <summary>
            Gets the circumcenter, which describes the center of a circle whose edges are defined by the defining points of the shape.
            </summary>
            <value>The in center.</value>
        </member>
        <member name="T:MPT.Geometry.Shapes.IDefinedShape">
            <summary>
            Interface for shapes of a pre-defined type that provides constraints on the more general shape geometry.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.IDefinedShape.LocalCoordinates">
            <summary>
            Formulates the local coordinates for the shape.
            </summary>
            <returns>IList&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.IIncircle">
            <summary>
            A circle that is tangent to all segments of a plane figure, or does not intersect, and contains the entire figure in its exterior. 
            All triangles have incircles and so do all regular polygons. Most other polygons do not.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.IIncircle.InRadius">
            <summary>
            Gets the inradius, which is the radius of a circle whose edge is tangent to all sides of the shape where an intersection occurs.
            </summary>
            <value>The inradius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IIncircle.InCenter">
            <summary>
            Gets the incenter, which describes the center of a circle whose edge is tangent to all sides of the shape where an intersection occurs.
            </summary>
            <value>The in center.</value>
        </member>
        <member name="T:MPT.Geometry.Shapes.IRegularPolygon">
            <summary>
            Interface for all paths that create a closed shape where all sides and angles are congruent.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.Apothem">
            <summary>
            The line segment from the center of a regular polygon to the midpoint of a side, or the length of this segment.
            Same as the inradius; that is, the radius of a regular polygon's inscribed circle.
            </summary>
            <value>The apothem.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.NumberOfSides">
            <summary>
            Number of sides (n) of the polygon.
            </summary>
            <value>The number of sides.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.SideLength">
            <summary>
            Length of any side of the polygon.
            </summary>
            <value>The length of the side.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.AngleInterior">
            <summary>
            Angle between any two sides of the polygon on the inside of the shape.
            </summary>
            <value>The angle interior.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.AngleInteriorSum">
            <summary>
            Sum of all interior angles of the shape.
            </summary>
            <value>The angle interior sum.</value>
        </member>
        <member name="T:MPT.Geometry.Shapes.IShapeProperties">
            <summary>
            Interface for all paths that create a closed shape.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Perimeter">
            <summary>
            Length of all sides of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Xo">
            <summary>
            X-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Yo">
            <summary>
            Y-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.IsoscelesRightTriangle">
            <summary>
            Represents an isoscesles triangle (2 sides of equal length) with one angle as 90&#176; &amp; the other two angles as 45&#176;.
            Implements the <see cref="T:MPT.Geometry.Shapes.IsoscelesTriangle" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.IsoscelesTriangle" />
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesRightTriangle.AngleA">
            <summary>
            The two angles of equal magnitude, α, which are opposite of the two sides of equal length. 45&#176; in this case.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesRightTriangle.AngleB">
            <summary>
            The angle of differing magnitude, β, which is opposite of the side of unequal length, b. 90&#176; in this case.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesRightTriangle.h">
            <summary>
            Gets the height, which is measured perpendicular to side b.
            </summary>
            <value>The h.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesRightTriangle.InRadius">
            <summary>
            Gets the inradius, r, which describes a circle whose edge is tangent to all 3 sides of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesRightTriangle.CircumRadius">
            <summary>
            Gets the circumcenter radius, R, which describes a circle whose edges are defined by the 3 defining points of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesRightTriangle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.IsoscelesRightTriangle"/> class.
            </summary>
            <param name="lengthsEqualA">Length of sides of equal length, a.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesRightTriangle.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesRightTriangle.LocalCoordinates">
            <summary>
            Formulates the local coordinates for the shape.
            </summary>
            <returns>IList&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.IsoscelesTrapezoid">
            <summary>
            Represents an isosceles trapezoid, with the origin at the lower left corner.
            Implements the <see cref="T:MPT.Geometry.Shapes.Quadrilateral" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.Quadrilateral" />
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesTrapezoid.g">
            <summary>
            The skew of the shape, i.e. the offset of the left side of the top segment from the local y-axis.
            </summary>
            <value>The skew.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesTrapezoid.a">
            <summary>
            Length of the sloped sides of the shape.
            </summary>
            <value>a.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesTrapezoid.CircumRadius">
            <summary>
            Gets the circumcenter radius, R, which describes a circle whose edges are defined by the 4 defining points of the shape.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTrapezoid.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Trapezoid" /> class.
            </summary>
            <param name="height">The height.</param>
            <param name="topWidth">Width of the top.</param>
            <param name="bottomWidth">Width of the bottom.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTrapezoid.Xo">
            <summary>
            The x centroid in local coordinatesfor the shape.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTrapezoid.getSkew(System.Double,System.Double)">
            <summary>
            Gets the skew.
            </summary>
            <param name="topWidth">Width of the top.</param>
            <param name="bottomWidth">Width of the bottom.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.IsoscelesTriangle">
            <summary>
            Any triangle that has two sides of equal length, a, or two angles of equal magnitude, α.
            Implements the <see cref="T:MPT.Geometry.Shapes.Triangle" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.Triangle" />
        </member>
        <member name="F:MPT.Geometry.Shapes.IsoscelesTriangle._sideUnequal">
            <summary>
            The length of the unequal side.
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.IsoscelesTriangle._sidesEqual">
            <summary>
            The length of the two equal-length sides.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesTriangle.AngleA">
            <summary>
            The two angles of equal magnitude, α, which are opposite of the two sides of equal length.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesTriangle.AngleB">
            <summary>
            The angle of differing magnitude, β, which is opposite of the side of unequal length, b.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesTriangle.AngleC">
            <summary>
            The angle, γ, which is opposite of side c, and is equal in magnitude to angle α.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesTriangle.h">
            <summary>
            Gets the height, which is measured perpendicular to side b.
            </summary>
            <value>The h.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesTriangle.InRadius">
            <summary>
            Gets the inradius, r, which describes a circle whose edge is tangent to all 3 sides of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.IsoscelesTriangle.CircumRadius">
            <summary>
            Gets the circumcenter radius, R, which describes a circle whose edges are defined by the 3 defining points of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.IsoscelesTriangle" /> class.
            </summary>
            <param name="lengthsEqualA">Length of sides of equal length, a.</param>
            <param name="lengthB">The length b, of the base of the triangle. This is the unequal length.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.#ctor(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.IsoscelesTriangle" /> class.
            </summary>
            <param name="apexCoordinate">The apex coordinate.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.#ctor(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.IsoscelesTriangle" /> class.
            </summary>
            <param name="lengthB">The length b, of the base of the triangle. This is the unequal length.</param>
            <param name="anglesEqualAlpha">The two angles of equal magnitude, α, which are opposite of the two sides of equal length.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.SideLengthA">
            <summary>
            Length of sides of equal length, a.
            </summary>
            <value>a.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.SideLengthB">
            <summary>
            Length of the unequal length side, b.
            </summary>
            <value>The b.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.SideLengthC">
            <summary>
            Length of side c, which is equal to side a.
            </summary>
            <value>The c.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.LocalCoordinates">
            <summary>
            Formulates the local coordinates for the shape.
            </summary>
            <returns>IList&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.getAlpha(System.Double,System.Double)">
            <summary>
            Gets the alpha angle.
            </summary>
            <param name="halfBase">Half of the base width.</param>
            <param name="height">The height.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.getBeta(System.Double,System.Double)">
            <summary>
            Gets the beta angle.
            </summary>
            <param name="halfBase">Half of the base width.</param>
            <param name="height">The height.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.getHeight">
            <summary>
            Gets the height, which is the altitude from the apex to the unequal side.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.getInRadius">
            <summary>
            Gets the in radius.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IsoscelesTriangle.getCircumRadius">
            <summary>
            Gets the circum radius.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Kite">
            <summary>
            Represents a kite shape, which is a diamond shape with two different axes of symmetry.
            Implements the <see cref="T:MPT.Geometry.Shapes.Quadrilateral" />
            Implements the <see cref="T:MPT.Geometry.Shapes.IDefinedShape" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.Quadrilateral" />
            <seealso cref="T:MPT.Geometry.Shapes.IDefinedShape" />
        </member>
        <member name="P:MPT.Geometry.Shapes.Kite.g">
            <summary>
            The skew of the shape, i.e. the offset of the the top center point from the local y-axis.
            </summary>
            <value>The skew.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Kite.w">
            <summary>
            The overall/outside width.
            </summary>
            <value>The w.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Kite.q">
            <summary>
            The overall/outside height.
            </summary>
            <value>The q.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Kite.a">
            <summary>
            The length of the sloping segments to the left of the center points of the shape.
            </summary>
            <value>a.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Kite.b">
            <summary>
            The length of the sloping segments to the right of the center points of the shape.
            </summary>
            <value>a.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Kite.h">
            <summary>
            The height of the center points from the center of the shape.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Kite.Centroid">
            <summary>
            The centroid of the shape.
            </summary>
            <value>The centroid.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Kite.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Kite" /> class.
            </summary>
            <param name="width">The overall width.</param>
            <param name="height">The overall height.</param>
            <param name="skew">The skew, i.e. offset of the center point from the y-axis.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Kite.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Kite.LocalCoordinates">
            <summary>
            Formulates the local coordinates for the shape.
            </summary>
            <returns>IList&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Octagon">
            <summary>
            A regular polygon of 8 sides.
            Implements the <see cref="T:MPT.Geometry.Shapes.RegularPolygon" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.RegularPolygon" />
        </member>
        <member name="F:MPT.Geometry.Shapes.Octagon._setNumberOfSides">
            <summary>
            The number of sides.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Octagon.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Octagon"/> class.
            </summary>
            <param name="circumRadius">The circumradius.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Octagon.OctagonByInradius(System.Double)">
            <summary>
            Returns an octagon sized by the inradius.
            </summary>
            <param name="inRadius">The inradius.</param>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Octagon.OctagonByCircumradius(System.Double)">
            <summary>
            Returns an octagon sized by the circumradius.
            </summary>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Parallelogram">
            <summary>
            Represents a parallelogram shape, with the origin at the lower left corner, and the bottom edge aligned with the x-axis.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Parallelogram.b_b">
            <summary>
            The bottom width.
            </summary>
            <value>The width bottom.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Parallelogram.a">
            <summary>
            Length of the sloped sides of the shape.
            </summary>
            <value>a.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Parallelogram.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Trapezoid" /> class.
            </summary>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <param name="skew">The skew offset of the top segment.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Parallelogram.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Parallelogram.Yo">
            <summary>
            The y centroid in local coordinatesfor the shape.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Pentagon">
            <summary>
            A regular polygon of 5 sides.
            Implements the <see cref="T:MPT.Geometry.Shapes.RegularPolygon" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.RegularPolygon" />
        </member>
        <member name="F:MPT.Geometry.Shapes.Pentagon._setNumberOfSides">
            <summary>
            The number of sides.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Pentagon.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Pentagon"/> class.
            </summary>
            <param name="circumRadius">The circumradius.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Pentagon.PentagonByInradius(System.Double)">
            <summary>
            Returns a pentagon sized by the inradius.
            </summary>
            <param name="inRadius">The inradius.</param>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Pentagon.PentagonByCircumradius(System.Double)">
            <summary>
            Returns a pentagon sized by the circumradius.
            </summary>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Polygon">
            <summary>
            Represents a polygon shape.
            A plane figure that is described by a finite number of straight line segments connected to form a closed polygonal chain or polygonal circuit.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Polygon.Points">
            <summary>
            The points that define the polygon.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Polygon.Sides">
            <summary>
            The sides that define the polygon.
            </summary>
            <value>The sides.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Polygon.Angles">
            <summary>
            The interior angles that are formed within the polygon.
            </summary>
            <value>The angles.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Polygon" /> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.#ctor(System.Collections.Generic.IEnumerable{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Segments.PolyLine" /> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.CheckValidShape">
            <summary>
            Determines whether shape is properly formed.
            </summary>
            <returns><c>true</c> if [is valid shape]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.CheckValidPolygon(MPT.Geometry.Segments.PolyLine)">
            <summary>
            Determines whether the specified polyline forms a valid polygon.
            </summary>
            <param name="polyline">The polyline.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException">Invalid shape: Polygon must have at least 3 coordinates + 1 for closure = 4.</exception>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.PointAt(System.Int32)">
            <summary>
            Returns the point at the specified point index.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.SideAt(System.Int32)">
            <summary>
            Returns the side at the specified side index.
            </summary>
            <param name="sideIndex">Index of the side.</param>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.SidesAdjacentAt(System.Int32)">
            <summary>
            Returns the pair of sides that join at the provided point index.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.AngleInteriorAt(System.Int32)">
            <summary>
            Returns the interior angle at the specified point index.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.NormalsRotateCounterClockwiseAt(System.Int32)">
            <summary>
            Unit normal vectors of the sides meeting at the specified point index are rotated counter-clockwise relative to each other.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.HasReentrantCorners">
            <summary>
            Determines whether the polygon has reentrant corners.
            </summary>
            <returns><c>true</c> if [has reentrant corners]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.indexPreceding(System.Int32)">
            <summary>
            Gets the preceding index, handling the wrap-around case.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.getAllCoordinates">
            <summary>
            Gets all coordinates defining the polygon.
            This does not include the wrap-around coordinate used for closure.
            </summary>
            <returns>List&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.getAllSides">
            <summary>
            Gets all sides defining the polygon.
            </summary>
            <returns>List&lt;LineSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.getAnglesBetweenAllSides">
            <summary>
            Gets all of the interior angles of the polygon.
            </summary>
            <returns>List&lt;Angle&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.normalsRotateCounterClockwise(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Unit normal vectors of the provided segments are rotated counter-clockwise relative to each other.
            </summary>
            <param name="side1">The side1.</param>
            <param name="side2">The side2.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.getAngleBetweenSides(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Gets the angle between two adjacent sides of the shape.
            </summary>
            <param name="side1">The side1.</param>
            <param name="side2">The side2.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.Area">
            <summary>
            Area of the shape.
            + if points are ordered counter-clockwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.Xo">
            <summary>
            X-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.Yo">
            <summary>
            Y-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.Area_i(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Returns twice the area under the quadrilateral formed between the segment and the y-axis.
            + if points are ordered counter-clockwise.
            </summary>
            <param name="segment">The segment.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Polygon.SetCoordinates(System.Collections.Generic.IEnumerable{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Sets the coordinates and ensures that a valid shape is formed.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="T:MPT.Geometry.Shapes.Quadrilateral">
            <summary>
            Represents any quadrilateral shape, with the origin at the lower left corner.
            A four-sided polygon with four angles.
            The five most common types are the parallelogram, the rectangle, the square, the trapezoid, and the rhombus.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Quadrilateral.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Quadrilateral" /> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Quadrilateral.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Quadrilateral" /> class.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="point3">The point3.</param>
            <param name="point4">The point4.</param>
        </member>
        <member name="T:MPT.Geometry.Shapes.Rectangle">
            <summary>
            Represents a rectangular shape, with the origin at the lower left corner.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Rectangle.b_b">
            <summary>
            The bottom width.
            </summary>
            <value>The width bottom.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Rectangle.g">
            <summary>
            The skew of the shape, i.e. the offset of the left side of the top segment from the local y-axis.
            </summary>
            <value>The skew.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Rectangle.Centroid">
            <summary>
            The centroid of the shape.
            </summary>
            <value>The centroid.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Rectangle.CircumRadius">
            <summary>
            Gets the circumcenter radius, R, which describes a circle whose edges are defined by the 4 defining points of the shape.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Rectangle.CircumCenter">
            <summary>
            Gets the circumcenter, which describes the center of a circle whose edges are defined by the 4 defining points of the shape.
            </summary>
            <value>The in center.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Rectangle.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Rectangle" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Rectangle.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Rectangle.Xo">
            <summary>
            The x centroid in local coordinatesfor the shape.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Rectangle.Yo">
            <summary>
            The y centroid in local coordinatesfor the shape.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.RegularPolygon">
            <summary>
            Represents a polygon shape where all sides and angles are congruent.
            Implements the <see cref="T:MPT.Geometry.Shapes.Polygon" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.Polygon" />
        </member>
        <member name="F:MPT.Geometry.Shapes.RegularPolygon._minNumberOfSides">
            <summary>
            The minimum number of sides (5): 4 sides is a square,  3 sides is an equilateral triangle, 2 sides or fewer is not a shape.
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.RegularPolygon._numberOfSides">
            <summary>
            The number of sides
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.RegularPolygon._lengthOfSides">
            <summary>
            The length of the sides
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.RegularPolygon.NumberOfSides">
            <summary>
            Gets the number of sides.
            </summary>
            <value>The number of sides.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RegularPolygon.SideLength">
            <summary>
            Length of any side of the polygon.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.RegularPolygon.Apothem">
            <summary>
            The line segment from the center of a regular polygon to the midpoint of a side, or the length of this segment.
            Same as the inradius; that is, the radius of a regular polygon's inscribed circle.
            </summary>
            <value>The apothem.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RegularPolygon.InRadius">
            <summary>
            Gets the inradius.
            </summary>
            <value>The inradius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RegularPolygon.InCenter">
            <summary>
            Gets the incenter, which describes the center of a circle whose edge is tangent to all sides of the shape.
            </summary>
            <value>The in center.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RegularPolygon.CircumRadius">
            <summary>
            Gets the circumradius.
            </summary>
            <value>The circumradius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RegularPolygon.CircumCenter">
            <summary>
            Gets the circumcenter, which describes the center of a circle whose edges are defined by the defining points of the shape.
            </summary>
            <value>The in center.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RegularPolygon.AngleInterior">
            <summary>
            Gets the interior angle.
            </summary>
            <value>The interior angle.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RegularPolygon.AngleInteriorSum">
            <summary>
            Gets the sum of the interior angles.
            </summary>
            <value>The sum of the interior angles.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.RegularPolygon.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.RegularPolygon"/> class.
            </summary>
            <param name="numberOfSides">The number of sides, &gt;= 5</param>
            <param name="circumRadius">The circumradius.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.RegularPolygon.RegularPolygonByInradius(System.Int32,System.Double)">
            <summary>
            Returns a regular polygon sized by the inradius.
            </summary>
            <param name="numberOfSides">The number of sides.</param>
            <param name="inRadius">The inradius.</param>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RegularPolygon.RegularPolygonByCircumradius(System.Int32,System.Double)">
            <summary>
            Returns a regular polygon sized by the circumradius.
            </summary>
            <param name="numberOfSides">The number of sides.</param>
            <param name="circumRadius">The circumradius.</param>
            <returns>RegularPolygon.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RegularPolygon.LocalCoordinates">
            <summary>
            Formulates the local coordinates for the shape.
            </summary>
            <returns>IList&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RegularPolygon.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RegularPolygon.Perimeter">
            <summary>
            Length of all sides of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RegularPolygon.Xo">
            <summary>
            X-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RegularPolygon.Yo">
            <summary>
            Y-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Rhombus">
            <summary>
            Represents a rhombus shape, which is a doubly-symmetric diamond.
            Implements the <see cref="T:MPT.Geometry.Shapes.Kite" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.Kite" />
        </member>
        <member name="P:MPT.Geometry.Shapes.Rhombus.g">
            <summary>
            The skew of the shape, i.e. the offset of the the top center point from the local y-axis.
            </summary>
            <value>The skew.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Rhombus.b">
            <summary>
            The length of the sloping segments to the right of the center points of the shape.
            </summary>
            <value>a.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Rhombus.InRadius">
            <summary>
            Gets the inradius, r, which describes a circle whose edge is tangent to all 4 sides of the shape.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Rhombus.InCenter">
            <summary>
            Gets the incenter, which describes the center of a circle whose edge is tangent to all 4 sides of the shape.
            </summary>
            <value>The in center.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Rhombus.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Rhombus" /> class.
            </summary>
            <param name="width">The overall width.</param>
            <param name="height">The overall height.</param>
        </member>
        <member name="T:MPT.Geometry.Shapes.RightTriangle">
            <summary>
            Any triangle where one of the three angles is 90°.
            Implements the <see cref="T:MPT.Geometry.Shapes.Triangle" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.Triangle" />
        </member>
        <member name="F:MPT.Geometry.Shapes.RightTriangle._sideLengthA">
            <summary>
            The side length a
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.RightTriangle._sideLengthB">
            <summary>
            The side length b
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.RightTriangle.AngleA">
            <summary>
            The angle, α, which is opposite of side a.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RightTriangle.AngleB">
            <summary>
            The angle, β, which is opposite of side b.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RightTriangle.AngleC">
            <summary>
            The angle, γ, which is opposite of side c and is 90°.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RightTriangle.e">
            <summary>
            Length of segment e, which spans from point a to the perpendicular intersection of h along side c.
            </summary>
            <value>The e.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RightTriangle.d">
            <summary>
            Length of segment d, which spans from point b to the perpendicular intersection of h along side c.
            </summary>
            <value>The e.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RightTriangle.h">
            <summary>
            Gets the height, which is the measurement of the line formed from any point to a perpendicular intersection with a side.
            </summary>
            <value>The h.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RightTriangle.InRadius">
            <summary>
            Gets the inradius, r, which describes a circle whose edge is tangent to all 3 sides of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.RightTriangle.CircumRadius">
            <summary>
            Gets the circumcenter radius, R, which describes a circle whose edges are defined by the 3 defining points of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.RightTriangle" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.#ctor(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.RightTriangle" /> class.
            </summary>
            <param name="apexCoordinate">The apex coordinate.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.SideLengthA">
            <summary>
            Length of sides of equal length, a.
            </summary>
            <value>a.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.SideLengthB">
            <summary>
            Length of the unequal length side, b.
            </summary>
            <value>The b.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.SideLengthC">
            <summary>
            Length of the hypotenuse side, c.
            </summary>
            <value>The c.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.LocalCoordinates">
            <summary>
            Formulates the local coordinates for the shape.
            </summary>
            <returns>IList&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.getAlpha(System.Double,System.Double)">
            <summary>
            Gets the alpha angle.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.getBeta(System.Double,System.Double)">
            <summary>
            Gets the beta angle.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.RightTriangle.getHypotenuse(System.Double,System.Double)">
            <summary>
            Gets the hypotenuse.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Shape">
            <summary>
            Base abstract Shape.
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.Shape._polyline">
            <summary>
            The polyline that describes the shape.
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.Shape._translation">
            <summary>
            The offset of the shape from it's default local coordinates.
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.Shape._rotation">
            <summary>
            The rotation of the shape from it's default local orientation.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Shape.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Shape.Name">
            <summary>
            The name of the shape.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Shape.IsHole">
            <summary>
            If true, the shape is considered to be a hole, otherwise it is a solid.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Shape.Centroid">
            <summary>
            The centroid of the shape.
            </summary>
            <value>The centroid.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Shape"/> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.CheckValidShape">
            <summary>
            Determines whether shape is properly formed.
            </summary>
            <returns><c>true</c> if [is valid shape]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.CheckValidShape(MPT.Geometry.Segments.PolyLine)">
            <summary>
            Determines whether the specified polyline is a valid shape.
            </summary>
            <param name="polyline">The polyline.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException">Invalid shape: Polyline does not form a closed shape.</exception>
            <exception cref="T:System.ArgumentException">Invalid shape: Polyline has a point intersecting another segment.</exception>
            <exception cref="T:System.ArgumentException">Invalid shape: Polyline has crossing segments.</exception>
            <exception cref="T:System.ArgumentException">Invalid shape: Polyline joins back in on itself, which is only allowed for composite shapes.</exception>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.IsClosedShape(MPT.Geometry.Segments.PolyLine)">
            <summary>
            Determines whether [is closed shape].
            </summary>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.closeShapeIfNeeded">
            <summary>
            Closes the shape if needed.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.IsAnySegmentCrossingAnotherSegment(MPT.Geometry.Segments.PolyLine)">
            <summary>
            Determines whether [is any segment crossing another segment] [the specified polyline].
            </summary>
            <param name="polyline">The polyline.</param>
            <returns><c>true</c> if [is any segment crossing another segment] [the specified polyline]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.IsJoiningPointOnAnotherSegment(MPT.Geometry.Segments.PolyLine)">
            <summary>
            Determines whether [is any point on segment and not ends] [the specified polyline].
            </summary>
            <param name="polyline">The polyline.</param>
            <returns><c>true</c> if [is any point on segment and not ends] [the specified polyline]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.IsValidPointOccurrences(MPT.Geometry.Segments.PolyLine)">
            <summary>
            Determines whether the specified polyline has valid point occurrences.
            If a point occurs once, the point connects a chain of segments.
            If a point occurs twice, and this only occurs for one point, this point is the point that closes the polyline to form a shape.
            If a point occurs more than twice, the shape is connecting back on itself. This case is best handled as a composite shape.
            </summary>
            <param name="polyline">The polyline.</param>
            <returns><c>true</c> if [is valid point ordering] [the specified polyline]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.GetPerimeterFromPolyline">
            <summary>
            Gets the perimeter length from polyline.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.PolyLine">
            <summary>
            Returns a copy of the polyline that forms the shape.
            </summary>
            <returns>PolyLine.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.PointBoundary">
            <summary>
            Returns the points that define the shape.
            </summary>
            <returns>PointBoundary.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.Extents">
            <summary>
            Returns the overall extents of the shape. 
            This includes extents for curve segments in between vertices.
            </summary>
            <returns>PointExtents.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.Perimeter">
            <summary>
            Length of all sides of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.Xo">
            <summary>
            X-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.Yo">
            <summary>
            Y-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.Translate(MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Translates the object.
            </summary>
            <param name="translation">The amount to translate by.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.translateSegments(MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Translates the segments.
            </summary>
            <param name="translation">The amount to translate by.</param>
            <returns>IList&lt;IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.ScaleFromPoint(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Scales the object from the provided reference point.
            </summary>
            <param name="scale">The amount to scale relative to the reference point.</param>
            <param name="referencePoint">The reference point.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.scaleSegmentsFromPoint(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Scales the segments from the provided reference point.
            </summary>
            <param name="scale">The amount to scale relative to the reference point.</param>
            <param name="referencePoint">The reference point.</param>
            <returns>IList&lt;IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.RotateAboutPoint(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Rotates the object about the reference point.
            </summary>
            <param name="rotation">The amount of rotation. [rad]</param>
            <param name="referencePoint">The center of rotation reference point.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.rotateSegmentsAboutPoint(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Rotates the segments about the reference point.
            </summary>
            <param name="rotation">The amount of rotation. [rad]</param>
            <param name="referencePoint">The center of rotation reference point.</param>
            <returns>IList&lt;IPathSegment&gt;.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Square">
            <summary>
            Represents a square shape, with the origin at the lower left corner.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Square.h">
            <summary>
            The height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Square.InRadius">
            <summary>
            Gets the inradius, r, which describes a circle whose edge is tangent to all 4 sides of the shape.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Square.InCenter">
            <summary>
            Gets the incenter, which describes the center of a circle whose edge is tangent to all 4 sides of the shape.
            </summary>
            <value>The in center.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Square.CircumRadius">
            <summary>
            Gets the circumcenter radius, R, which describes a circle whose edges are defined by the 4 defining points of the shape.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Square.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Square" /> class.
            </summary>
            <param name="width">The width.</param>
        </member>
        <member name="T:MPT.Geometry.Shapes.Trapezoid">
            <summary>
            Represents a trapezoidal shape, with the origin at the lower left corner.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Trapezoid.b_t">
            <summary>
            The top width.
            </summary>
            <value>The width top.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Trapezoid.b_b">
            <summary>
            The bottom width.
            </summary>
            <value>The width bottom.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Trapezoid.h">
            <summary>
            The height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Trapezoid.g">
            <summary>
            The skew of the shape, i.e. the offset of the left side of the top segment from the local y-axis.
            </summary>
            <value>The skew.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Trapezoid.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Trapezoid" /> class.
            </summary>
            <param name="height">The height.</param>
            <param name="topWidth">Width of the top.</param>
            <param name="bottomWidth">Width of the bottom.</param>
            <param name="skew">The skew offset of the top segment.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Trapezoid.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Trapezoid.Xo">
            <summary>
            The x centroid in local coordinatesfor the shape.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Trapezoid.Yo">
            <summary>
            The y centroid in local coordinatesfor the shape.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Trapezoid.LocalCoordinates">
            <summary>
            Formulates the local coordinates for the shape.
            </summary>
            <returns>IList&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Triangle">
            <summary>
            Represents a triangular shape, with the origin at the lower left corner.
            This is any closed shape of 3 straight sides formed by 3 distinct coordinates.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.PointA">
            <summary>
            Gets the coordinate for point a.
            </summary>
            <value>The point a.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.PointB">
            <summary>
            Gets the coordinate for point b.
            </summary>
            <value>The point b.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.PointC">
            <summary>
            Gets the coordinate for point c.
            </summary>
            <value>The point c.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.SideA">
            <summary>
            Gets the side a.
            </summary>
            <value>The side a.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.SideB">
            <summary>
            Gets the side b.
            </summary>
            <value>The side b.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.SideC">
            <summary>
            Gets the side c.
            </summary>
            <value>The side c.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.AngleA">
            <summary>
            The angle which is opposite of side a.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.AngleB">
            <summary>
            The angle which is opposite of side b.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.AngleC">
            <summary>
            The angle which is opposite of side c.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.h">
            <summary>
            Gets the height, which is the measurement of the line formed from any point to a perpendicular intersection with a side.
            This is one of the altitudes defined for the shape.
            </summary>
            <value>The h.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.InRadius">
            <summary>
            Gets the inradius, r, which describes a circle whose edge is tangent to all 3 sides of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.InCenter">
            <summary>
            Gets the incenter, which describes the center of a circle whose edge is tangent to all 3 sides of the triangle.
            This is also the intersection of projected lines from angle bisectors.
            </summary>
            <value>The in center.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.CircumRadius">
            <summary>
            Gets the circumcenter radius, R, which describes a circle whose edges are defined by the 3 defining points of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.CircumCenter">
            <summary>
            Gets the circumcenter, which describes the center of a circle whose edges are defined by the 3 defining points of the triangle.
            This is also the intersection location of projected lines from perpendicular side bisectors.
            </summary>
            <value>The in center.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.OrthoCenter">
            <summary>
            The intersection of the three altitude lines, which are formed by a line drawn from an angle to a perpendicular intersection with the opposite side.
            </summary>
            <value>The ortho center.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle.Centroid">
            <summary>
            The intersection of the three median lines, which are formed by a line drawn from the midpoint of a side through the opposite angle.
            </summary>
            <value>The centroid.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Triangle" /> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Quadrilateral" /> class.
            </summary>
            <param name="pointA">The point opposite side a.</param>
            <param name="pointB">The point opposite side b.</param>
            <param name="pointC">The point opposite side c.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.setCenterCoordinates">
            <summary>
            Sets the center coordinates.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.setInCenter">
            <summary>
            Sets the in-center.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.setInRadius">
            <summary>
            Sets the in-radius.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.setCircumcenter">
            <summary>
            Sets the circumcenter.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.setCircumradius">
            <summary>
            Sets the circumradius.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.setOrthocenter">
            <summary>
            Sets the orthocenter.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.Perimeter">
            <summary>
            Length of all sides of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.SemiPerimeter">
            <summary>
            Gets the semi-perimeter.
            </summary>
            <value>The semi perimeter.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.SideLengthA">
            <summary>
            Length of the vertical side, if applicable, a .
            </summary>
            <value>a.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.SideLengthB">
            <summary>
            Length of the base/horizontal side, if applicable, b.
            </summary>
            <value>The b.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.SideLengthC">
            <summary>
            Length of the hypotenuse side, if applicable, c.
            </summary>
            <value>The c.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.getAltitude">
            <summary>
            Gets the altitude.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AltitudeLengthA">
            <summary>
            The length of altitude line A, which spans from point A to a perpendicular intersection with side A.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AltitudeCoordinateA">
            <summary>
            The coordinate where altitude line A intersects side A.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AltitudeLineA">
            <summary>
            The line which spans from point A to a perpendicular intersection with side A.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AltitudeLengthB">
            <summary>
            The length of altitude line B, which spans from point B to a perpendicular intersection with side B.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AltitudeCoordinateB">
            <summary>
            The coordinate where altitude line B intersects side B.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AltitudeLineB">
            <summary>
            The line which spans from point B to a perpendicular intersection with side B.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AltitudeLengthC">
            <summary>
            The length of altitude line C, which spans from point C to a perpendicular intersection with side C.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AltitudeCoordinateC">
            <summary>
            The coordinate where altitude line C intersects side C.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AltitudeLineC">
            <summary>
            The line which spans from point C to a perpendicular intersection with side C.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.MedianLengthA">
            <summary>
            The length of median line A, which spans from point A to an intersection at the midpoint of side A.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.MedianCoordinateA">
            <summary>
            The coordinate where median line A intersects side A.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.MedianLineA">
            <summary>
            The line which spans from point A to an intersection at the midpoint of side A.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.MedianLengthB">
            <summary>
            The length of median line B, which spans from point B to an intersection at the midpoint of side B.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.MedianCoordinateB">
            <summary>
            The coordinate where median line B intersects side B.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.MedianLineB">
            <summary>
            The line which spans from point B to an intersection at the midpoint of side B.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.MedianLengthC">
            <summary>
            The length of median line C, which spans from point C to an intersection at the midpoint of side C.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.MedianCoordinateC">
            <summary>
            The coordinate where median line C intersects side C.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.MedianLineC">
            <summary>
            The line which spans from point C to an intersection at the midpoint of side C.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AngleBisectorLengthA">
            <summary>
            The length of angle bisector line A, which spans from point A to an intersection with side A such that angle A is bisected.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AngleBisectorCoordinateA">
            <summary>
            The coordinate where angle bisector line A intersects side A.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AngleBisectorLineA">
            <summary>
            The line which spans from point A to an intersection with side A such that angle A is bisected.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AngleBisectorLengthB">
            <summary>
            The length of angle bisector line B, which spans from point B to an intersection with side B such that angle B is bisected.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AngleBisectorCoordinateB">
            <summary>
            The coordinate where angle bisector line B intersects side B.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AngleBisectorLineB">
            <summary>
            The line which spans from point B to an intersection with side B such that angle B is bisected.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AngleBisectorLengthC">
            <summary>
            The length of angle bisector line C, which spans from point C to an intersection with side C such that angle C is bisected.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AngleBisectorCoordinateC">
            <summary>
            The coordinate where angle bisector line C intersects side C.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.AngleBisectorLineC">
            <summary>
            The line which spans from point C to an intersection with side C such that angle C is bisected.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="F:MPT.Geometry.Shapes.Triangle._A">
            <summary>
            a
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.Triangle._B">
            <summary>
            The b
            </summary>
        </member>
        <member name="F:MPT.Geometry.Shapes.Triangle._C">
            <summary>
            The c
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.setPerpendicularSideBisectors">
            <summary>
            Sets the perpendicular side bisectors sides arranged in descending order.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.PerpendicularSideBisectorLengthA">
            <summary>
            The length of perpendicular side bisector line A, which spans from the circumcenter to a perpendicular intersection with side A such that side A is bisected.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.PerpendicularSideBisectorCoordinateA">
            <summary>
            The coordinate where perpendicular side bisector line A intersects side A.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.PerpendicularSideBisectorLineA">
            <summary>
            The line which spans from the circumcenter to a perpendicular intersection with side A such that side A is bisected.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.PerpendicularSideBisectorLengthB">
            <summary>
            The length of perpendicular side bisector line B, which spans from the circumcenter to a perpendicular intersection with side B such that side B is bisected.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.PerpendicularSideBisectorCoordinateB">
            <summary>
            The coordinate where perpendicular side bisector line BA intersects side B.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.PerpendicularSideBisectorLineB">
            <summary>
            The line which spans from the circumcenter to a perpendicular intersection with side B such that side B is bisected.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.PerpendicularSideBisectorLengthC">
            <summary>
            The length of perpendicular side bisector line C, which spans from the circumcenter to a perpendicular intersection with side C such that side C is bisected.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.PerpendicularSideBisectorCoordinateC">
            <summary>
            The coordinate where perpendicular side bisector line C intersects side C.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.PerpendicularSideBisectorLineC">
            <summary>
            The line which spans from the circumcenter to a perpendicular intersection with side C such that side C is bisected.
            </summary>
            <returns>LineSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.projectionIntersection(MPT.Math.Coordinates.CartesianCoordinate,MPT.Geometry.Segments.LineSegment,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns a coordinate that is the intersection of a line projected from a corner through a midpoint into the opposite side.
            </summary>
            <param name="point">The corner point.</param>
            <param name="opposingSide">The opposing side.</param>
            <param name="center">The center point used for creating the projection line.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.getAngleA">
            <summary>
            Gets the angle alpha.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.getAngleB">
            <summary>
            Gets the angle beta.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle.getAngleC">
            <summary>
            Gets the angle gamma.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Triangle306090">
            <summary>
            A triangle of angles 30°, 60° &amp; 90°.
            Implements the <see cref="T:MPT.Geometry.Shapes.RightTriangle" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.RightTriangle" />
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle306090.AngleA">
            <summary>
            The angle, α, which is opposite of side a and is 30°.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle306090.AngleB">
            <summary>
            The angle, β, which is opposite of side b and is 60°.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle306090.AngleC">
            <summary>
            The angle, γ, which is opposite of side c and is 90°.
            </summary>
            <value>The beta.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle306090.InRadius">
            <summary>
            Gets the inradius, r, which describes a circle whose edge is tangent to all 3 sides of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle306090.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Triangle306090" /> class.
            </summary>
            <param name="widthA">The length of side a.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle306090.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle306090.SideLengthB">
            <summary>
            Length of the base/horizontal side, b.
            </summary>
            <value>The b.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle306090.SideLengthC">
            <summary>
            Length of the hypotenuse side, c.
            </summary>
            <value>The c.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle306090.getHeight(System.Double)">
            <summary>
            Gets the width.
            </summary>
            <param name="widthA">The length of side a.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle306090.getHypotenuse(System.Double)">
            <summary>
            Gets the hypotenuse.
            </summary>
            <param name="widthA">The length of side a.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Triangle345">
            <summary>
            Smallest possible integer lengths for a right triangle.
            Implements the <see cref="T:MPT.Geometry.Shapes.RightTriangle" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.RightTriangle" />
        </member>
        <member name="F:MPT.Geometry.Shapes.Triangle345._scale">
            <summary>
            The scale that is applied to the sides of length 3, 4 &amp; 5 and all other derived properties.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle345.InRadius">
            <summary>
            Gets the inradius, r, which describes a circle whose edge is tangent to all 3 sides of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Triangle345.CircumRadius">
            <summary>
            Gets the circumcenter radius, R, which describes a circle whose edges are defined by the 3 defining points of the triangle.
            </summary>
            <value>The in radius.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle345.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Triangle345" /> class.
            </summary>
            <param name="scale">The scale to apply to the sides of lengths 3, 4 &amp; 5.</param>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle345.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle345.Perimeter">
            <summary>
            Length of all sides of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle345.SideLengthA">
            <summary>
            Length of the vertical side, a .
            </summary>
            <value>a.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle345.SideLengthB">
            <summary>
            Length of the base/horizontal side, b.
            </summary>
            <value>The b.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle345.SideLengthC">
            <summary>
            Length of the hypotenuse side, c.
            </summary>
            <value>The c.</value>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle345.getWidth(System.Double)">
            <summary>
            Gets the width.
            </summary>
            <param name="scale">The scale.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle345.getHeight(System.Double)">
            <summary>
            Gets the height.
            </summary>
            <param name="scale">The scale.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.Triangle345.getHypotenuse(System.Double)">
            <summary>
            Gets the hypotenuse.
            </summary>
            <param name="scale">The scale.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Tools.CoordinatesBoundary`1">
            <summary>
            Represents boundary coordinates.
            </summary>
            <typeparam name="T">The type of coordinate.</typeparam>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1._contents">
            <summary>
            The contents
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="F:MPT.Geometry.Tools.CoordinatesBoundary`1._contents" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" /> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1"/> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" /> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Reset(System.Collections.Generic.IList{`0})">
            <summary>
            Resets the specified coordinates.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary>
            Adds to boundary.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>true if <paramref name="item">item</paramref> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. 
            This method also returns false if <paramref name="item">item</paramref> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.RemoveRange(System.Collections.Generic.IList{`0})">
            <summary>
            Removes from boundary.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.InsertRange(System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            Inserts the range.
            </summary>
            <param name="index">The index.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Replace(`0,`0)">
            <summary>
            Replaces the specified original item.
            </summary>
            <param name="originalItem">The original item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.ReplaceAt(System.Int32,`0)">
            <summary>
            Replaces at.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>The index of <paramref name="item">item</paramref> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. 
            The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Extents">
            <summary>
            Gets the extents.
            </summary>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.FirstCoordinate">
            <summary>
            Returns the first point of the boundary.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.LastCoordinate">
            <summary>
            Returns the last point of the boundary.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1._arrayResizeRatio">
            <summary>
            The array resize ratio
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1._minArraySize">
            <summary>
            The minimum array size
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.resizeArraySizeIfNecessary">
            <summary>
            Resizes the array size if necessary.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.reduceArraySizeIfNecessary">
            <summary>
            Reduces the array size if necessary.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.resizeArray(System.Int32)">
            <summary>
            Resizes the array.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1">
            <summary>
            Class CoordinatesEnumerator.
            Implements the <see cref="T:System.Collections.Generic.IEnumerator`1" />
            </summary>
            <typeparam name="U"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1" />
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1._position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1._contents">
            <summary>
            The contents
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.#ctor(`1[])">
            <summary>
            Initializes a new instance of the <see cref="U:CoordinatesEnumerator`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Tools.Extents`1">
            <summary>
            Represents the coordinate bounds of a shape or line, or cluster of points.
            </summary>
            <typeparam name="T">The type of coordinate.</typeparam>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._originalCoordinates">
            <summary>
            The original coordinates
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._maxYLimit">
            <summary>
            The maximum allowed Y-coordinate
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._minYLimit">
            <summary>
            The minimum allowed Y-coordinate
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._maxXLimit">
            <summary>
            The maximum allowed X-coordinate
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._minXLimit">
            <summary>
            The minimum allowed X-coordinate
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.MaxY">
            <summary>
            Gets the maximum Y-coordinate.
            </summary>
            <value>The maximum Y-coordinate.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.MinY">
            <summary>
            Gets the minimum Y-coordinate.
            </summary>
            <value>The minimum Y-coordinate.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.MaxX">
            <summary>
            Gets the maximum X-coordinate.
            </summary>
            <value>The maximum X-coordinate.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.MinX">
            <summary>
            Gets the minimum X-coordinate.
            </summary>
            <value>The minimum X-coordinate.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:MPT.Geometry.Tools.Extents`1" /> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.Extents`1"/> class for a path segment.
            </summary>
            <param name="pointI">The first point forming a path.</param>
            <param name="pointJ">The second point forming a path.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.Extents`1" /> class for a polyline or a shape.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <param name="maxYLimit">The maximum y limit.</param>
            <param name="minYLimit">The minimum y limit.</param>
            <param name="maxXLimit">The maximum x limit.</param>
            <param name="minXLimit">The minimum x limit.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.#ctor(MPT.Geometry.Tools.Extents{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.Extents`1" /> class for cloning.
            </summary>
            <param name="extents">The extents.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.initializeLimits(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the limits.
            </summary>
            <param name="maxYLimit">The maximum y limit.</param>
            <param name="minYLimit">The minimum y limit.</param>
            <param name="maxXLimit">The maximum x limit.</param>
            <param name="minXLimit">The minimum x limit.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.initializeEmpty">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.initializeForSetting">
            <summary>
            Initializes for setting.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.isExtentsWidthSet">
            <summary>
            Determines whether [is extents width set].
            </summary>
            <returns><c>true</c> if [is extents width set]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.isExtentsHeightSet">
            <summary>
            Determines whether [is extents height set].
            </summary>
            <returns><c>true</c> if [is extents height set]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Add(`0)">
            <summary>
            Adds the specified coordinate.
            </summary>
            <param name="coordinate">The coordinate.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates the extents to include the specified coordinates.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.AddExtents(MPT.Geometry.Tools.Extents{`0})">
            <summary>
            Updates the extents to include the specified extents.
            </summary>
            <param name="extents">The extents.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Reset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Resets the specified coordinates.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.IsWithinExtents(`0)">
            <summary>
            Determines whether the coordinate lies within the extents.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if the specified coordinates are within the extents; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Boundary">
            <summary>
            Returns a rectangle boundary of this instance.
            </summary>
            <returns>NRectangle.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.GeometricCenter">
            <summary>
            Gets the geometric center.
            </summary>
            <returns>T.</returns>
            <value>The geometric center.</value>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Translate(System.Double,System.Double)">
            <summary>
            Translates points that define the extents.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Rotate(System.Double)">
            <summary>
            Rotates points that define the extents.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.addCoordinate(`0)">
            <summary>
            Adds the coordinate.
            </summary>
            <param name="coordinate">The coordinate.</param>
        </member>
        <member name="T:MPT.Geometry.Tools.PointBoundary">
            <summary>
            Class PointBoundary.
            Implements the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" />
            </summary>
            <seealso cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" />
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.#ctor">
            <summary>
            Represents a boundary defined by CartesianCoordinates.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.#ctor(MPT.Math.Coordinates.CartesianCoordinate[])">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointBoundary"/> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.#ctor(System.Collections.Generic.IEnumerable{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointBoundary" /> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.Extents">
            <summary>
            Gets the extents.
            </summary>
            <returns>Extents&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.AddRange(System.Collections.Generic.IList{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Adds to boundary.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.RemoveRange(System.Collections.Generic.IList{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Removes from boundary.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="T:MPT.Geometry.Tools.PointExtents">
            <summary>
            Class PointExtents.
            Implements the <see cref="T:MPT.Geometry.Tools.Extents`1" />
            </summary>
            <seealso cref="T:MPT.Geometry.Tools.Extents`1" />
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:MPT.Geometry.Tools.PointExtents"/> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointExtents"/> class for a path segment.
            </summary>
            <param name="pointI">The first point forming a path.</param>
            <param name="pointJ">The second point forming a path.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.#ctor(System.Collections.Generic.IEnumerable{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointExtents"/> class for a polyline or a shape.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.#ctor(MPT.Geometry.Tools.Extents{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointExtents"/> class for cloning.
            </summary>
            <param name="extents">The extents.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.IsWithinExtents(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines whether the coordinate lies within the extents.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if the specified coordinates are within the extents; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.Boundary">
            <summary>
            Returns a rectangle boundary of this instance.
            </summary>
            <returns>NRectangle.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.GeometricCenter">
            <summary>
            Gets the geometric center.
            </summary>
            <returns>CartesianCoordinate.</returns>
            <value>The geometric center.</value>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.Translate(System.Double,System.Double)">
            <summary>
            Translates points that define the extents.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.Rotate(System.Double)">
            <summary>
            Rotates points that define the extents.
            </summary>
            <param name="angleRadians">The angle [radians].</param>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.addCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Adds the coordinate.
            </summary>
            <param name="coordinate">The coordinate.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Extents.</returns>
        </member>
        <member name="T:MPT.Geometry.Tools.SegmentsBoundary">
            <summary>
            Represents a boundary defined by contiguous segments.
            Implements the <see cref="T:MPT.Math.ITolerance" />
            Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
            <seealso cref="T:MPT.Math.ITolerance" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary._contents">
            <summary>
            The contents
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MPT.Geometry.Segments.IPathSegment"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" /> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.#ctor(MPT.Geometry.Segments.IPathSegment[])">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.SegmentsBoundary"/> class.
            </summary>
            <param name="segments">The segments.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.#ctor(System.Collections.Generic.IEnumerable{MPT.Geometry.Segments.IPathSegment})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" /> class.
            </summary>
            <param name="segments">The segments.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.AddFirst(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Adds the segment as the first segment in the boundary.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.AddLast(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Adds the segment as the last segment in the boundary.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.insert(System.Int32,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.RemoveFirst">
            <summary>
            Removes the first segment.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.RemoveLast">
            <summary>
            Removes the last segment.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.removeAt(System.Int32)">
            <summary>
            Removes segment at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.Replace(MPT.Geometry.Segments.IPathSegment,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Replaces the specified original segment with the provided segment.
            Coordinates defining the segments must match.
            </summary>
            <param name="originalItem">The original item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.ReplaceAt(System.Int32,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Replaces the segment at the specified index with the provided segment.
            Coordinates defining the segments must match.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.IndexOf(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Gets the index of the specified segment.
            Returns -1 if the segment is not found.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.Contains(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether this instance contains the segment.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.CopyTo(MPT.Geometry.Segments.IPathSegment[],System.Int32)">
            <summary>
            Copies to array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.FirstPoint">
            <summary>
            The first point defining the segment boundary.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.LastPoint">
            <summary>
            The last point defining the segment boundary.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.FirstSegment">
            <summary>
            The first segment defining the segment boundary.
            </summary>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.LastSegment">
            <summary>
            The last segment defining the segment boundary.
            </summary>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.AdjacentSegmentsAt(System.Int32)">
            <summary>
            Returns the pair of segments that join at the point specified by index.
            If the point is the first or last point, the leading or following segment will be null.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.AdjacentSegments(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the pair of segments that join at the provided coordinate.
            If the point is the first or last point, the leading or following segment will be null.
            </summary>
            <param name="point">The point.</param>
            <returns>Tuple&lt;IPathSegment, IPathSegment&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.PointBoundary">
            <summary>
            Returns the points that define the boundary between segments.
            </summary>
            <returns>PointBoundary.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.Extents">
            <summary>
            Returns the overall extents of the segments boundary. 
            This includes extents for curve shapes in between vertices.
            </summary>
            <returns>PointExtents.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SplitSegment(MPT.Geometry.Segments.IPathSegment,System.Double)">
            <summary>
            Splits the segment at the relative position.
            </summary>
            <param name="segment">The segment.</param>
            <param name="sRelative">The relative position along the path.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SplitSegment(System.Int32,System.Double)">
            <summary>
            Splits the segment at the relative position.
            </summary>
            <param name="index">The index of the segment to split.</param>
            <param name="sRelative">The relative position along the path.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.RemovePoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Removes the point, if present.
            </summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.areOfSamePathSegmentType(MPT.Geometry.Segments.IPathSegment,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the path segments are of the same type.
            </summary>
            <param name="segment1">The segment1.</param>
            <param name="segment2">The segment2.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.IsValidFirstSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether [is valid first segment] [the specified segment].
            </summary>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if [is valid first segment] [the specified segment]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.IsValidLastSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether [is valid last segment] [the specified segment].
            </summary>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if [is valid last segment] [the specified segment]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary._arrayResizeRatio">
            <summary>
            The array resize ratio
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary._minArraySize">
            <summary>
            The minimum array size
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.resizeArraySizeIfNecessary">
            <summary>
            Resizes the array size if necessary.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.reduceArraySizeIfNecessary">
            <summary>
            Reduces the array size if necessary.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.resizeArray(System.Int32)">
            <summary>
            Resizes the array.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1">
            <summary>
            Class SegmentsEnumerator.
            Implements the <see cref="T:System.Collections.Generic.IEnumerator`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1" />
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1._position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1._contents">
            <summary>
            The contents
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
    </members>
</doc>
