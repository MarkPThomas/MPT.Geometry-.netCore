<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MPT.Geometry</name>
    </assembly>
    <members>
        <member name="T:MPT.Geometry.GeometryLibrary">
            <summary>
            Library of operations related to the geometry framework.
            </summary>
        </member>
        <member name="F:MPT.Geometry.GeometryLibrary.ZeroTolerance">
            <summary>
            Default zero tolerance for operations.
            </summary>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsCollinearSameDirection(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the same direction.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsConcave(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            Vectors form a concave angle.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsOrthogonal(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            Vectors form a 90 degree angle.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsConvex(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            Vectors form a convex angle.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsCollinearOppositeDirection(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
             True: Segments are parallel, on the same line, oriented in the opposite direction.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsConcaveInside(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            True: The concave side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.IsConvexInside(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment,System.Double)">
            <summary>
            True: The convex side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.ConcavityCollinearity(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns a value indicating the concavity of the vectors. 
            1 = Pointing the same way. 
            &gt; 0 = Concave. 
            0 = Orthogonal. 
            &lt; 0 = Convex. 
            -1 = Pointing the exact opposite way.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.DotProduct(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Dot product of two vectors.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.CrossProduct(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Cross-product of two vectors.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.Angle(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns the angle [radians] between the two vectors.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.GeometryLibrary.Area(MPT.Geometry.Segments.LineSegment,MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns the area between two vectors.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Intersections.LineToLineIntersection">
            <summary>
            Class LineToLineIntersection.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.NumberOfIntersectionsOnHorizontalProjection(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate[],System.Double)">
            <summary>
            The numbers of shape boundary intersections a horizontal line makes when projecting to the right from the provided point.
            An odd number indicates the point is inside the shape.
            An even number indicates the point is outside the shape.
            If the point is on a vertex or segment, the function returns 0.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="shapeBoundary">The shape boundary composed of n points.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">Shape boundary describes a shape. Closure to the shape boundary is needed.</exception>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsWithinLineHeightInclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies within the straight line height.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="ptI">The vertex i.</param>
            <param name="ptJ">The vertex j.</param>
            <returns><c>true</c> if the point lies within the segment extents height, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsWithinLineHeightExclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies within the straight line height, not including the vertex locations.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="ptI">The vertex i.</param>
            <param name="ptJ">The vertex j.</param>
            <returns><c>true</c> if the point lies within the segment extents height, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsWithinLineWidthInclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies within the straight line width.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="ptI">The vertex i.</param>
            <param name="ptJ">The vertex j.</param>
            <returns><c>true</c> if the point lies within the segment width, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsWithinLineWidthExclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies within the straight line width.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="ptI">The vertex i.</param>
            <param name="ptJ">The vertex j.</param>
            <returns><c>true</c> if the point lies within the segment width, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsLeftOfLineEndInclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies to the left of the straight line end.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="ptI">Vertex i.</param>
            <param name="ptJ">Vertex j.</param>
            <returns><c>true</c> if the point lies to the left of the straight line end, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsLeftOfLineEndExclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies to the left of the straight line end, not including the vertex locations..
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="ptI">Vertex i.</param>
            <param name="ptJ">Vertex j.</param>
            <returns><c>true</c> if the point lies to the left of the straight line end, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsBelowLineBottomInclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies below the straight line end.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="ptI">Vertex i.</param>
            <param name="ptJ">Vertex j.</param>
            <returns><c>true</c> if the point lies to below the segment bottom, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsBelowLineBottomExclusive(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point lies below the straight line end.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="ptI">Vertex i.</param>
            <param name="ptJ">Vertex j.</param>
            <returns><c>true</c> if the point lies to below the segment bottom, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsLeftOfSegmentIntersection(System.Double,System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point is to the left of the horizontally projected segment intersection.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="xIntersection">The x-coordinate of the intersection of the projected line.</param>
            <param name="vertexI">The vertex i.</param>
            <param name="vertexJ">The vertex j.</param>
            <returns><c>true</c> if the point is to the left of the horizontally projected segment intersection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.PointIsBelowSegmentIntersection(System.Double,System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the point is below the vertically projected segment intersection.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="yIntersection">The y-coordinate of the intersection of the projected line.</param>
            <param name="vertexI">The vertex i.</param>
            <param name="vertexJ">The vertex j.</param>
            <returns><c>true</c> if the point is below the vertically projected segment intersection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.IntersectionPointX(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            The x-coordinate of the intersection of the horizontally projected line with the provided segment.
            </summary>
            <param name="yPtN">The y-coordinate of pt n, where the projection starts.</param>
            <param name="ptI">Vertex i of the segment.</param>
            <param name="ptJ">Vertex j of the segment.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.LineToLineIntersection.IntersectionPointY(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            The y-coordinate of the intersection of the vertically projected line with the provided segment.
            </summary>
            <param name="xPtN">The x-coordinate of pt n, where the projection starts.</param>
            <param name="ptI">Vertex i of the segment.</param>
            <param name="ptJ">Vertex j of the segment.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Geometry.Intersections.PointIntersection">
            <summary>
            Handles calculations related to point intersections.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointIntersection.IsOnPoint(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines if the points overlap.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns><c>true</c> if the points lie in the same position, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointIntersection.IsOnBoundary(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate[])">
            <summary>
            Determines whether the specified location is on the path defined by straight line segments connecting the provided coordinates.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="shapeBoundary">The shape boundary.</param>
            <returns><c>true</c> if [is on shape] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointIntersection.IsWithinShape(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate[])">
            <summary>
            Determines whether the specified location is within the shape defined by straight line segments connecting the provided coordinates.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="shapeBoundary">The shape boundary composed of n points.</param>
            <returns><c>true</c> if the specified location is within the shape; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MPT.Geometry.Intersections.PointProjection">
            <summary>
            Handles calculations related to horizontal projections.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.NumberOfIntersectionsOnHorizontalProjection(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate[],System.Boolean,System.Boolean,System.Double)">
            <summary>
            The numbers of shape boundary intersections a horizontal line makes when projecting to the right from the provided point.
            If the point is on a vertex or segment, the function returns either 0 or 1.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="shapeBoundary">The shape boundary composed of n points.</param>
            <param name="includePointOnSegment">if set to <c>true</c> [include point on segment].</param>
            <param name="includePointOnVertex">if set to <c>true</c> [include point on vertex].</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">Shape boundary describes a shape. Closure to the shape boundary is needed.</exception>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsWithinSegmentExtentsHeightInclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies within the segment extents height.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies within the segment extents height, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsWithinSegmentExtentsHeightExclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies within the segment extents height, not including the boundary locations.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies within the segment extents height, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsWithinSegmentExtentsWidthInclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies within the segment extents width.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies within the segment width, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsWithinSegmentExtentsWidthExclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies within the segment extents width.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies within the segment width, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsLeftOfSegmentExtentsEndInclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies to the left of the segment extents max x-coordinate.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies to the left of the segment end, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsLeftOfSegmentExtentsEndExclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies to the left of the segment extents max x-coordinate, not including the boundary coordinate.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies to the left of the segment end, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsBelowSegmentExtentsInclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies below the segment extents end.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies to below the segment bottom, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsBelowSegmentExtentsExclusive(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point lies below the segment extents end.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point lies to below the segment bottom, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.IntersectionPointX(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            The x-coordinate of the intersection of the horizontally projected line with the provided segment.
            </summary>
            <param name="yPtN">The y-coordinate of pt n, where the projection starts.</param>
            <param name="segment">The segment.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentException">Segment is horizontal, so intersection point is either infinity or NAN.</exception>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsLeftOfSegmentIntersection(System.Double,System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point is to the left of the horizontally projected segment intersection.
            </summary>
            <param name="xPtN">The x-coordinate of pt n.</param>
            <param name="xIntersection">The x-coordinate of the intersection of the projected line.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point is to the left of the horizontally projected segment intersection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.IntersectionPointY(System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            The y-coordinate of the intersection of the vertically projected line with the provided segment.
            </summary>
            <param name="xPtN">The x-coordinate of pt n, where the projection starts.</param>
            <param name="segment">The segment.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentException">Segment is vertical, so intersection point is either infinity or NAN.</exception>
        </member>
        <member name="M:MPT.Geometry.Intersections.PointProjection.PointIsBelowSegmentIntersection(System.Double,System.Double,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines if the point is below the vertically projected segment intersection.
            </summary>
            <param name="yPtN">The y-coordinate of pt n.</param>
            <param name="yIntersection">The y-coordinate of the intersection of the projected line.</param>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if the point is below the vertically projected segment intersection, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:MPT.Geometry.Segments.ICurve">
            <summary>
            Interface for all shapes that incorporate elements of a curve.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICurve.Center">
            <summary>
            CartesianCoordinaterepresenting the center of the circular arc, which lies at a distance of the radius form either end point.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICurve.Radius">
            <summary>
            Radius of the curve.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICurve.ArcLength">
            <summary>
            Total length of the curve (radius*angle).
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICurve.Curvature">
            <summary>
            The curvature of the line (1/radius).
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICurve.Angle">
            <summary>
            Angle between the rays that connect each end of the curve to the common origin [radians].
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.ICurve.AngleDegrees">
            <summary>
            Angle between the rays that connect each end of the curve to the common origin [degrees].
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.ICurve.TangentialAngle(System.Double)">
            <summary>
            Angle that is tangent to the slope of the curve [radians].
            </summary>
            <param name="angleNormal">Angle [radians] along the curve sweep where the tangential angle is desired.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.ICurve.NormalAngle(System.Double)">
            <summary>
            Angle that is normal to the slope of the curve [radians].
            </summary>
            <param name="angleTangential">The slope of the curve [radians] where the normal angle is desired.</param>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Segments.ILine">
            <summary>
            Interface ILine
            </summary>
        </member>
        <member name="T:MPT.Geometry.Segments.IPathDivisionExtension">
            <summary>
            Interface for paths that are divisible.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.PointDivision(System.Double)">
            <summary>
            Returns a point determined by a given fraction of the distance between point i and point j of the segment.
             <paramref name="fraction"/> must be between 0 and 1.
            </summary>
            <param name="fraction">Fraction of the way from point 1 to point 2.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathDivisionExtension.PointExtension(System.Double)">
            <summary>
             Returns a point determined by a given ratio of the distance between point i and point j of the segment.
            </summary>
            <param name="ratio">Ratio of the size of the existing segment. 
            If <paramref name="ratio"/>&lt; 0, returned point is offset from point i, in that direction. 
            If <paramref name="ratio"/>&gt; 0, returned point is offset from point j, in that direction.</param>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Segments.IPathSegment">
            <summary>
            Interface for any segment along a path lying in a plane.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.IPathSegment.Extents">
            <summary>
            Gets the extents.
            </summary>
            <value>The extents.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.IPathSegment.I">
            <summary>
            First coordinate value.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.IPathSegment.J">
            <summary>
            Second coordinate value.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.Length">
            <summary>
            Length of the path segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.Xo">
            <summary>
            X-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.Yo">
            <summary>
            Y-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.X(System.Double)">
            <summary>
            X-coordinate on the path that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.Y(System.Double)">
            <summary>
            Y-coordinate on the path that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.HasSameCoordinates(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether the segment [has same coordinates] as [the specified segment].
            </summary>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if [has same coordinates] [the specified segment]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.PointByPathPosition(System.Double)">
            <summary>
            Coordinate on the path that corresponds to the position along the path.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.NormalVector(System.Double)">
            <summary>
            Vector that is normal to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.IPathSegment.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="T:MPT.Geometry.Segments.IPolarCoordinates">
            <summary>
            Interface related to line geometries in polar coordinates.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.IPolarCoordinates.IPolar">
            <summary>
            First coordinate value {radius, rotation[radians]}.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.IPolarCoordinates.JPolar">
            <summary>
            Second coordinate value {radius, rotation[radians]}.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.IPolarCoordinates.LengthPolar">
            <summary>
            Length of the path segment [radians].
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPolarCoordinates.CentroidPolar">
            <summary>
            Polar-coordinates of the centroid of the line {radius, rotation[radians]}.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPolarCoordinates.XPolar(System.Double)">
            <summary>
            X-coordinate on the path that corresponds to the polar-coordinate given.
            </summary>
            <param name="theta">Rotation-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPolarCoordinates.YPolar(System.Double)">
            <summary>
            Y-coordinate on the path that corresponds to the polar-coordinate given.
            </summary>
            <param name="theta">Rotation-coordinate for which a y-coordinate is desired [radians].</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPolarCoordinates.PointByPathPositionPolar(System.Double)">
            <summary>
            Coordinate on the path that corresponds to the position along the path.
            </summary>
            <param name="theta">The relative position along the path [radians].</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.IPolarCoordinates.NormalVectorPolar(System.Double)">
            <summary>
            Vector that is normal to the line connecting the defining points at the position specified.
            </summary>
            <param name="theta">The relative position along the path [radians].</param>
        </member>
        <member name="M:MPT.Geometry.Segments.IPolarCoordinates.TangentVectorPolar(System.Double)">
            <summary>
            Vector that is tangential to the line connecting the defining points at the position specified.
            </summary>
            <param name="theta">The relative position along the path [radians].</param>
        </member>
        <member name="T:MPT.Geometry.Segments.IPolyLine">
            <summary>
            Interface for any object consisting of multiple connecting objects of IPathSegment.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Segments.LineSegment">
            <summary>
            Segment that describes a straight line in a plane.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.LineSegment.Curve">
            <summary>
            Curve that spans between the I and J coordinates.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.LineSegment.I">
            <summary>
            First coordinate value.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.LineSegment.J">
            <summary>
            Second coordinate value.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes the line segment to span between the provided points.
            </summary>
            <param name="i">First point of the line.</param>
            <param name="j">Second point of the line.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.Length">
            <summary>
            Length of the line segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.Xo">
            <summary>
            X-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.Yo">
            <summary>
            Y-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.X(System.Double)">
            <summary>
            X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.Y(System.Double)">
            <summary>
            Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.PointByPathPosition(System.Double)">
            <summary>
            Coordinate on the path that corresponds to the position along the path.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.NormalVector(System.Double)">
            <summary>
            Vector that is normal to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.IncludesCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the line segment between or on the defining points.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.IsIntersecting(MPT.Geometry.Segments.LineSegment)">
            <summary>
            Provided line segment intersects the line segment between or on the defining points.
            </summary>
            <param name="otherLine"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.IntersectionCoordinate(MPT.Geometry.Segments.LineSegment)">
            <summary>
            Returns a point where the line segment intersects the provided line segment.
            </summary>
            <param name="otherLine">Line segment that intersects the current line segment.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.PointDivision(System.Double)">
            <summary>
            Returns a point determined by a given fraction of the distance between point i and point j of the segment.
             <paramref name="fraction"/> must be between 0 and 1.
            </summary>
            <param name="fraction">Fraction of the way from point 1 to point 2.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.PointExtension(System.Double)">
            <summary>
             Returns a point determined by a given ratio of the distance between point i and point j of the segment.
            </summary>
            <param name="ratio">Ratio of the size of the existing segment. 
            If <paramref name="ratio"/>&lt; 0, returned point is offset from point i, in that direction. 
            If <paramref name="ratio"/>&gt; 0, returned point is offset from point j, in that direction.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.pointOffsetOnLine(System.Double)">
            <summary>
            Returns a point determined by a given fraction of the distance between point i and point j of the segment.
            </summary>
            <param name="fraction">Fraction of the way from point 1 to point 2.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.LineSegment.ToVector">
            <summary>
            Converts the line segment to a vector.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Segments.PathSegment">
            <summary>
            Base class used for segment types.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PathSegment.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
        </member>
        <member name="F:MPT.Geometry.Segments.PathSegment._extents">
            <summary>
            The extents
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PathSegment.Extents">
            <summary>
            Gets or sets the extents.
            </summary>
            <value>The extents.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.PathSegment.I">
            <summary>
            First coordinate value.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PathSegment.J">
            <summary>
            Second coordinate value.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes the segment to span between the provided points.
            </summary>
            <param name="i">First point of the line.</param>
            <param name="j">Second point of the line.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.HasSameCoordinates(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether the segment [has same coordinates] as [the specified segment].
            </summary>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if [has same coordinates] [the specified segment]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.TangentVector">
            <summary>
            Vector that is tangential to the line connecting the defining points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.NormalVector">
            <summary>
            Vector that is normal to the line connecting the defining points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.Length">
            <summary>
            Length of the path segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.Xo">
            <summary>
            X-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.Yo">
            <summary>
            Y-coordinate of the centroid of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.X(System.Double)">
            <summary>
            X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.Y(System.Double)">
            <summary>
            Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.PointByPathPosition(System.Double)">
            <summary>
            Coordinate on the path that corresponds to the position along the path.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.NormalVector(System.Double)">
            <summary>
            Vector that is normal to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the line connecting the defining points at the position specified.
            </summary>
            <param name="sRelative">The relative position along the path.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.Equals(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PathSegment.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:MPT.Geometry.Segments.PolyLine">
            <summary>
            Class PolyLine.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="F:MPT.Geometry.Segments.PolyLine._contents">
            <summary>
            The contents
            </summary>
        </member>
        <member name="F:MPT.Geometry.Segments.PolyLine._pointBoundary">
            <summary>
            The point boundary
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.CountCoordinates">
            <summary>
            Gets the count coordinates.
            </summary>
            <value>The count coordinates.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.Coordinates">
            <summary>
            Gets the coordinates.
            </summary>
            <value>The coordinates.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.CoordinateEnumerator">
            <summary>
            Gets the coordinate enumerator.
            </summary>
            <value>The coordinate enumerator.</value>
        </member>
        <member name="F:MPT.Geometry.Segments.PolyLine._segmentBoundary">
            <summary>
            The segment boundary
            </summary>
        </member>
        <member name="F:MPT.Geometry.Segments.PolyLine._segments">
            <summary>
            The segments
            </summary>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.CountSegments">
            <summary>
            Gets the count segments.
            </summary>
            <value>The count segments.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.SegmentEnumerator">
            <summary>
            Gets the segment enumerator.
            </summary>
            <value>The segment enumerator.</value>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MPT.Geometry.Segments.IPathSegment"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="P:MPT.Geometry.Segments.PolyLine.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Segments.PolyLine" /> class.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.#ctor(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Segments.PolyLine" /> class.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.#ctor(System.Collections.Generic.IEnumerable{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Segments.PolyLine" /> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.Coordinate(System.Int32)">
            <summary>
            Coordinates the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.FirstPoint">
            <summary>
            Returns the first point of the polyline.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.LastPoint">
            <summary>
            Returns the last point of the polyline.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.Segment(System.Int32)">
            <summary>
            Segments the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Segments.PolyLine.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Circle">
            <summary>
            Represents a circle shape, with the origin at the lower left corner of the lower left quadrant.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.CircularSector">
            <summary>
            Represents a circular wedge shape, with the origin at the common origin of the arc segment capping the end. 
            The x-axis forms a line of symmetry.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.CircularSegment">
            <summary>
            Represents the lense shape of an arc segment with a straight-line cap between the segment ends. 
            The origin is at the first vertex of the arc segment.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.Ellipse">
            <summary>
            Represents an ellipse shape, with the origin at...
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.Hexagon">
            <summary>
            Represents a hexagon shape, with the origin at the lower left corner of the lower left quadrant, and the flat edge aligned with the x-axis.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.IRegularPolygon">
            <summary>
            Interface for all paths that create a closed shape where all sides and angles are congruent.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.Circumcirle">
            <summary>
            A circle that passes through all vertices of a plane figure and contains the entire figure in its interior. 
            All triangles have circumcircles and so do all regular polygons. Most other polygons do not.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.Apothem">
            <summary>
            The line segment from the center of a regular polygon to the midpoint of a side, or the length of this segment. 
            Same as the inradius; that is, the radius of a regular polygon's inscribed circle.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.NumberOfSides">
            <summary>
            Number of sides (n) of the polygon.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.SideLength">
            <summary>
            Length of any side of the polygon.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.InteriorAngle">
            <summary>
            Angle between any two sides of the polygon on the inside of the shape.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.IRegularPolygon.InteriorAngleSum">
            <summary>
            Sum of all interior angles of the shape.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.IShapeProperties">
            <summary>
            Interface for all paths that create a closed shape.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Perimeter">
            <summary>
            Length of all sides of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Area">
            <summary>
            Area of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Xo">
            <summary>
            X-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Yo">
            <summary>
            Y-coordinate of the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Ixo">
            <summary>
            Rotational inertia about the x-axis, passing through the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Iyo">
            <summary>
            Rotational inertia about the y-axis, passing through the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Ixyo">
            <summary>
            Polar rotational inertia, passing through the centroid of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Ix(System.Double)">
            <summary>
            Rotational inertia about the x-axis, passing through an axis offset from the centroid of the shape.
            </summary>
            <param name="yOffset">Distance along the y-axis that the new coordinate axis is offset.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Iy(System.Double)">
            <summary>
            Rotational inertia about the y-axis, passing through an axis offset from the centroid of the shape.
            </summary>
            <param name="xOffset">Distance along the x-axis that the new coordinate axis is offset.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Ixy(System.Double,System.Double)">
            <summary>
            Rotational inertia about the y-axis, passing through an axis offset from the centroid of the shape.
            </summary>
            <param name="xOffset">Distance along the x-axis that the new coordinate axis is offset.</param>
            <param name="yOffset">Distance along the y-axis that the new coordinate axis is offset.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.Ixy(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Coordinate for the point offset from the origin.
            </summary>
            <param name="coordsOffset"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.IxRotation(System.Double)">
            <summary>
            Rotational inertia about the x-axis, passing through an axis rotated off from the principal axes.
            </summary>
            <param name="alpha">Rotation of the axes from the principal axes [radians].</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.IyRotation(System.Double)">
            <summary>
            Rotational inertia about the y-axis, passing through an axis rotated off from the principal axes.
            </summary>
            <param name="alpha">Rotation of the axes from the principal axes [radians].</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Geometry.Shapes.IShapeProperties.IxyRotation(System.Double)">
            <summary>
            Rotational inertia about the x-axis, passing through an axis rotated off from the principal axes.
            </summary>
            <param name="alpha">Rotation of the axes from the principal axes [radians].</param>
            <returns></returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Parallelogram">
            <summary>
            Represents a parallelogram shape, with the origin at the lower left corner, and the bottom edge aligned with the x-axis.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.Polygon">
            <summary>
            Represents a polygon shape.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.Quadrilateral">
            <summary>
            Represents any quadrilateral shape, with the origin at the lower left corner. 
            This can include triangles
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.Rectangle">
            <summary>
            Represents a rectangular shape, with the origin at the lower left corner.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.RegularPolygon">
            <summary>
            Class RegularPolygon.
            Implements the <see cref="T:MPT.Geometry.Shapes.Polygon" />
            </summary>
            <seealso cref="T:MPT.Geometry.Shapes.Polygon" />
        </member>
        <member name="T:MPT.Geometry.Shapes.Shape">
            <summary>
            Base abstract Shape.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Shapes.Shape.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Shape.Name">
            <summary>
            The name of the shape.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MPT.Geometry.Shapes.Shape.IsHole">
            <summary>
            If true, the shape is considered to be a hole, otherwise it is a solid.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Shapes.Shape"/> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Shapes.Shape.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:MPT.Geometry.Shapes.Square">
            <summary>
            Represents a sqauare shape, with the origin at the lower left corner.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.Trapezoid">
            <summary>
            Represents a trapezoidal shape, with the origin at the lower left corner.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.Triangle">
            <summary>
            Represents a triangular shape, with the origin at the lower left corner.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Shapes.Wedge">
            <summary>
            Represents a rectangular shape, with the origin at the lower left corner.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Tools.CoordinatesBoundary`1">
            <summary>
            Represents boundary coordinates.
            </summary>
            <typeparam name="T">The type of coordinate.</typeparam>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1._contents">
            <summary>
            The contents
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1._coordinates">
            <summary>
            The coordinates.
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.Coordinates">
            <summary>
            The coordinates that compose the boundary.
            </summary>
            <value>The boundary.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="F:MPT.Geometry.Tools.CoordinatesBoundary`1._contents" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" /> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1"/> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" /> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Reset(System.Collections.Generic.IList{`0})">
            <summary>
            Resets the specified coordinates.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary>
            Adds to boundary.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>true if <paramref name="item">item</paramref> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. 
            This method also returns false if <paramref name="item">item</paramref> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.RemoveRange(System.Collections.Generic.IList{`0})">
            <summary>
            Removes from boundary.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.InsertRange(System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            Inserts the range.
            </summary>
            <param name="index">The index.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Replace(`0,`0)">
            <summary>
            Replaces the specified original item.
            </summary>
            <param name="originalItem">The original item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.ReplaceAt(System.Int32,`0)">
            <summary>
            Replaces at.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>The index of <paramref name="item">item</paramref> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. 
            The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.FirstCoordinate">
            <summary>
            Returns the first point of the boundary.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.LastCoordinate">
            <summary>
            Returns the last point of the boundary.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.Extents">
            <summary>
            Gets the extents.
            </summary>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1._arrayResizeRatio">
            <summary>
            The array resize ratio
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1._minArraySize">
            <summary>
            The minimum array size
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.resizeArraySizeIfNecessary">
            <summary>
            Resizes the array size if necessary.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.reduceArraySizeIfNecessary">
            <summary>
            Reduces the array size if necessary.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.resizeArray(System.Int32)">
            <summary>
            Resizes the array.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1">
            <summary>
            Class CoordinatesEnumerator.
            Implements the <see cref="T:System.Collections.Generic.IEnumerator`1" />
            </summary>
            <typeparam name="U"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1" />
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1._position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1._contents">
            <summary>
            The contents
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.#ctor(`1[])">
            <summary>
            Initializes a new instance of the <see cref="U:CoordinatesEnumerator`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.CoordinatesBoundary`1.CoordinatesEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:MPT.Geometry.Tools.Extents`1">
            <summary>
            Represents the coordinate bounds of a shape or line, or cluster of points.
            </summary>
            <typeparam name="T">The type of coordinate.</typeparam>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._originalCoordinates">
            <summary>
            The original coordinates
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._maxYLimit">
            <summary>
            The maximum allowed Y-coordinate
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._minYLimit">
            <summary>
            The minimum allowed Y-coordinate
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._maxXLimit">
            <summary>
            The maximum allowed X-coordinate
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.Extents`1._minXLimit">
            <summary>
            The minimum allowed X-coordinate
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.MaxY">
            <summary>
            Gets the maximum Y-coordinate.
            </summary>
            <value>The maximum Y-coordinate.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.MinY">
            <summary>
            Gets the minimum Y-coordinate.
            </summary>
            <value>The minimum Y-coordinate.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.MaxX">
            <summary>
            Gets the maximum X-coordinate.
            </summary>
            <value>The maximum X-coordinate.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.MinX">
            <summary>
            Gets the minimum X-coordinate.
            </summary>
            <value>The minimum X-coordinate.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.Extents`1.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:MPT.Geometry.Tools.Extents`1" /> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.Extents`1"/> class for a path segment.
            </summary>
            <param name="pointI">The first point forming a path.</param>
            <param name="pointJ">The second point forming a path.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.Extents`1" /> class for a polyline or a shape.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <param name="maxYLimit">The maximum y limit.</param>
            <param name="minYLimit">The minimum y limit.</param>
            <param name="maxXLimit">The maximum x limit.</param>
            <param name="minXLimit">The minimum x limit.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.#ctor(MPT.Geometry.Tools.Extents{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.Extents`1" /> class for cloning.
            </summary>
            <param name="extents">The extents.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.initializeLimits(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the limits.
            </summary>
            <param name="maxYLimit">The maximum y limit.</param>
            <param name="minYLimit">The minimum y limit.</param>
            <param name="maxXLimit">The maximum x limit.</param>
            <param name="minXLimit">The minimum x limit.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.initializeEmpty">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.initializeForSetting">
            <summary>
            Initializes for setting.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.isExtentsWidthSet">
            <summary>
            Determines whether [is extents width set].
            </summary>
            <returns><c>true</c> if [is extents width set]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.isExtentsHeightSet">
            <summary>
            Determines whether [is extents height set].
            </summary>
            <returns><c>true</c> if [is extents height set]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Add(`0)">
            <summary>
            Adds the specified coordinate.
            </summary>
            <param name="coordinate">The coordinate.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates the extents to include the specified coordinates.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.AddExtents(MPT.Geometry.Tools.Extents{`0})">
            <summary>
            Updates the extents to include the specified extents.
            </summary>
            <param name="extents">The extents.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Reset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Resets the specified coordinates.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.IsWithinExtents(`0)">
            <summary>
            Determines whether the coordinate lies within the extents.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if the specified coordinates are within the extents; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Boundary">
            <summary>
            Returns a rectangle boundary of this instance.
            </summary>
            <returns>NRectangle.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.GeometricCenter">
            <summary>
            Gets the geometric center.
            </summary>
            <returns>T.</returns>
            <value>The geometric center.</value>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Translate(System.Double,System.Double)">
            <summary>
            Translates points that define the extents.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.Rotate(System.Double)">
            <summary>
            Rotates points that define the extents.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.Extents`1.addCoordinate(`0)">
            <summary>
            Adds the coordinate.
            </summary>
            <param name="coordinate">The coordinate.</param>
        </member>
        <member name="T:MPT.Geometry.Tools.PointBoundary">
            <summary>
            Class PointBoundary.
            Implements the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" />
            </summary>
            <seealso cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" />
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.#ctor">
            <summary>
            Represents a boundary defined by CartesianCoordinates.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.#ctor(MPT.Math.Coordinates.CartesianCoordinate[])">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointBoundary"/> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.#ctor(System.Collections.Generic.IEnumerable{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointBoundary" /> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.AddRange(System.Collections.Generic.IList{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Adds to boundary.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.RemoveRange(System.Collections.Generic.IList{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Removes from boundary.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointBoundary.Extents">
            <summary>
            Gets the extents.
            </summary>
            <returns>Extents&lt;CartesianCoordinate&gt;.</returns>
        </member>
        <member name="T:MPT.Geometry.Tools.PointExtents">
            <summary>
            Class PointExtents.
            Implements the <see cref="T:MPT.Geometry.Tools.Extents`1" />
            </summary>
            <seealso cref="T:MPT.Geometry.Tools.Extents`1" />
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:MPT.Geometry.Tools.PointExtents"/> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointExtents"/> class for a path segment.
            </summary>
            <param name="pointI">The first point forming a path.</param>
            <param name="pointJ">The second point forming a path.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.#ctor(System.Collections.Generic.IEnumerable{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointExtents"/> class for a polyline or a shape.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.#ctor(MPT.Geometry.Tools.Extents{MPT.Math.Coordinates.CartesianCoordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.PointExtents"/> class for cloning.
            </summary>
            <param name="extents">The extents.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.IsWithinExtents(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Determines whether the coordinate lies within the extents.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if the specified coordinates are within the extents; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.Boundary">
            <summary>
            Returns a rectangle boundary of this instance.
            </summary>
            <returns>NRectangle.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.GeometricCenter">
            <summary>
            Gets the geometric center.
            </summary>
            <returns>CartesianCoordinate.</returns>
            <value>The geometric center.</value>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.Translate(System.Double,System.Double)">
            <summary>
            Translates points that define the extents.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.Rotate(System.Double)">
            <summary>
            Rotates points that define the extents.
            </summary>
            <param name="angleRadians">The angle [radians].</param>
            <returns>Extents&lt;T&gt;.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.addCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Adds the coordinate.
            </summary>
            <param name="coordinate">The coordinate.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.PointExtents.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Extents.</returns>
        </member>
        <member name="T:MPT.Geometry.Tools.SegmentsBoundary">
            <summary>
            Represents a boundary defined by contiguous segments.
            Implements the <see cref="T:MPT.Math.ITolerance" />
            Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
            <seealso cref="T:MPT.Math.ITolerance" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary._contents">
            <summary>
            The contents
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MPT.Geometry.Segments.IPathSegment"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>IPathSegment.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" /> class.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.#ctor(MPT.Geometry.Segments.IPathSegment[])">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.SegmentsBoundary"/> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.#ctor(System.Collections.Generic.IEnumerable{MPT.Geometry.Segments.IPathSegment})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.CoordinatesBoundary`1" /> class.
            </summary>
            <param name="segments">The coordinates.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.AddFirst(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Adds the segment as the first segment in the boundary.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.AddLast(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Adds the segment as the last segment in the boundary.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.insert(System.Int32,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.RemoveFirst">
            <summary>
            Removes the first segment.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.RemoveLast">
            <summary>
            Removes the last segment.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.removeAt(System.Int32)">
            <summary>
            Removes segment at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.Replace(MPT.Geometry.Segments.IPathSegment,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Replaces the specified original segment with the provided segment.
            Coordinates defining the segments must match.
            </summary>
            <param name="originalItem">The original item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.ReplaceAt(System.Int32,MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Replaces the segment at the specified index with the provided segment.
            Coordinates defining the segments must match.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.IndexOf(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Gets the index of the specified segment.
            Returns -1 if the segment is not found.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.Contains(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether this instance contains the segment.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.CopyTo(MPT.Geometry.Segments.IPathSegment[],System.Int32)">
            <summary>
            Copies to array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.FirstPoint">
            <summary>
            The first point defining the segment boundary.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.LastPoint">
            <summary>
            The last point defining the segment boundary.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.PointBoundary">
            <summary>
            Returns the points that define the boundary between segments.
            </summary>
            <returns>PointBoundary.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.Extents">
            <summary>
            Returns the overall extents of the segments boundary. 
            This includes extends for curve shapes in between vertices.
            </summary>
            <returns>PointExtents.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.isValidFirstSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether [is valid first segment] [the specified segment].
            </summary>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if [is valid first segment] [the specified segment]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.isValidLastSegment(MPT.Geometry.Segments.IPathSegment)">
            <summary>
            Determines whether [is valid last segment] [the specified segment].
            </summary>
            <param name="segment">The segment.</param>
            <returns><c>true</c> if [is valid last segment] [the specified segment]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary._arrayResizeRatio">
            <summary>
            The array resize ratio
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary._minArraySize">
            <summary>
            The minimum array size
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.resizeArraySizeIfNecessary">
            <summary>
            Resizes the array size if necessary.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.reduceArraySizeIfNecessary">
            <summary>
            Reduces the array size if necessary.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.resizeArray(System.Int32)">
            <summary>
            Resizes the array.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1">
            <summary>
            Class SegmentsEnumerator.
            Implements the <see cref="T:System.Collections.Generic.IEnumerator`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1" />
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1._position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1._contents">
            <summary>
            The contents
            </summary>
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:MPT.Geometry.Tools.SegmentsBoundary.SegmentsEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
    </members>
</doc>
